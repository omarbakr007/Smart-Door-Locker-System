
FinalMC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000025d6  0000266a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800072  00800072  0000267c  2**0
                  ALLOC
  3 .stab         00002958  00000000  00000000  0000267c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012dd  00000000  00000000  00004fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000062b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000063f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006561  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000081aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009095  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a9ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 91 10 	call	0x2122	; 0x2122 <main>
      8a:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 95 12 	jmp	0x252a	; 0x252a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 95 12 	jmp	0x252a	; 0x252a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 95 12 	jmp	0x252a	; 0x252a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 95 12 	jmp	0x252a	; 0x252a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 95 12 	jmp	0x252a	; 0x252a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <UART_init+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	6b 83       	std	Y+3, r22	; 0x03
     b56:	7c 83       	std	Y+4, r23	; 0x04
     b58:	8d 83       	std	Y+5, r24	; 0x05
     b5a:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
     b5c:	1a 82       	std	Y+2, r1	; 0x02
     b5e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b60:	eb e2       	ldi	r30, 0x2B	; 43
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	88 e1       	ldi	r24, 0x18	; 24
     b6e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
     b70:	e0 e4       	ldi	r30, 0x40	; 64
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	86 e8       	ldi	r24, 0x86	; 134
     b76:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	ad 81       	ldd	r26, Y+5	; 0x05
     b7e:	be 81       	ldd	r27, Y+6	; 0x06
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	aa 1f       	adc	r26, r26
     b86:	bb 1f       	adc	r27, r27
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	aa 1f       	adc	r26, r26
     b8e:	bb 1f       	adc	r27, r27
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	9c 01       	movw	r18, r24
     b9a:	ad 01       	movw	r20, r26
     b9c:	80 e4       	ldi	r24, 0x40	; 64
     b9e:	92 e4       	ldi	r25, 0x42	; 66
     ba0:	af e0       	ldi	r26, 0x0F	; 15
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	bc 01       	movw	r22, r24
     ba6:	cd 01       	movw	r24, r26
     ba8:	0e 94 4b 12 	call	0x2496	; 0x2496 <__udivmodsi4>
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     bb6:	e0 e4       	ldi	r30, 0x40	; 64
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	89 2f       	mov	r24, r25
     bc0:	99 27       	eor	r25, r25
     bc2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     bc4:	e9 e2       	ldi	r30, 0x29	; 41
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	80 83       	st	Z, r24
}
     bcc:	26 96       	adiw	r28, 0x06	; 6
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	0f 92       	push	r0
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     bea:	eb e2       	ldi	r30, 0x2B	; 43
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	80 72       	andi	r24, 0x20	; 32
     bf6:	90 70       	andi	r25, 0x00	; 0
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	b9 f3       	breq	.-18     	; 0xbea <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     bfc:	ec e2       	ldi	r30, 0x2C	; 44
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c14:	eb e2       	ldi	r30, 0x2B	; 43
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	88 23       	and	r24, r24
     c1c:	dc f7       	brge	.-10     	; 0xc14 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     c1e:	ec e2       	ldi	r30, 0x2C	; 44
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
}
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <UART_sendString+0x6>
     c30:	0f 92       	push	r0
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	9b 83       	std	Y+3, r25	; 0x03
     c38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c3a:	19 82       	std	Y+1, r1	; 0x01
     c3c:	0e c0       	rjmp	.+28     	; 0xc5a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	9b 81       	ldd	r25, Y+3	; 0x03
     c48:	fc 01       	movw	r30, r24
     c4a:	e2 0f       	add	r30, r18
     c4c:	f3 1f       	adc	r31, r19
     c4e:	80 81       	ld	r24, Z
     c50:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		i++;
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	9b 81       	ldd	r25, Y+3	; 0x03
     c64:	fc 01       	movw	r30, r24
     c66:	e2 0f       	add	r30, r18
     c68:	f3 1f       	adc	r31, r19
     c6a:	80 81       	ld	r24, Z
     c6c:	88 23       	and	r24, r24
     c6e:	39 f7       	brne	.-50     	; 0xc3e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <UART_receiveString+0xa>
     c86:	0f 92       	push	r0
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	9b 83       	std	Y+3, r25	; 0x03
     c8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c90:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	9b 81       	ldd	r25, Y+3	; 0x03
     c9c:	8c 01       	movw	r16, r24
     c9e:	02 0f       	add	r16, r18
     ca0:	13 1f       	adc	r17, r19
     ca2:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
     ca6:	f8 01       	movw	r30, r16
     ca8:	80 83       	st	Z, r24
     caa:	0f c0       	rjmp	.+30     	; 0xcca <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	8c 01       	movw	r16, r24
     cbe:	02 0f       	add	r16, r18
     cc0:	13 1f       	adc	r17, r19
     cc2:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
     cc6:	f8 01       	movw	r30, r16
     cc8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	9b 81       	ldd	r25, Y+3	; 0x03
     cd4:	fc 01       	movw	r30, r24
     cd6:	e2 0f       	add	r30, r18
     cd8:	f3 1f       	adc	r31, r19
     cda:	80 81       	ld	r24, Z
     cdc:	83 32       	cpi	r24, 0x23	; 35
     cde:	31 f7       	brne	.-52     	; 0xcac <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	9b 81       	ldd	r25, Y+3	; 0x03
     cea:	fc 01       	movw	r30, r24
     cec:	e2 0f       	add	r30, r18
     cee:	f3 1f       	adc	r31, r19
     cf0:	10 82       	st	Z, r1
}
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	08 95       	ret

00000d02 <TWI_init>:

#include "../../common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
     d0a:	e0 e2       	ldi	r30, 0x20	; 32
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	80 83       	st	Z, r24
	TWSR = 0x00;
     d12:	e1 e2       	ldi	r30, 0x21	; 33
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
     d18:	e2 e2       	ldi	r30, 0x22	; 34
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
     d20:	e6 e5       	ldi	r30, 0x56	; 86
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	84 e0       	ldi	r24, 0x04	; 4
     d26:	80 83       	st	Z, r24
}
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <TWI_start>:

void TWI_start(void)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     d36:	e6 e5       	ldi	r30, 0x56	; 86
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	84 ea       	ldi	r24, 0xA4	; 164
     d3c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d3e:	e6 e5       	ldi	r30, 0x56	; 86
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 23       	and	r24, r24
     d46:	dc f7       	brge	.-10     	; 0xd3e <TWI_start+0x10>
}
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <TWI_stop>:

void TWI_stop(void)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     d56:	e6 e5       	ldi	r30, 0x56	; 86
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	84 e9       	ldi	r24, 0x94	; 148
     d5c:	80 83       	st	Z, r24
}
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	0f 92       	push	r0
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     d70:	e3 e2       	ldi	r30, 0x23	; 35
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     d78:	e6 e5       	ldi	r30, 0x56	; 86
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	84 e8       	ldi	r24, 0x84	; 132
     d7e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d80:	e6 e5       	ldi	r30, 0x56	; 86
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	88 23       	and	r24, r24
     d88:	dc f7       	brge	.-10     	; 0xd80 <TWI_writeByte+0x1c>
}
     d8a:	0f 90       	pop	r0
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     d9a:	e6 e5       	ldi	r30, 0x56	; 86
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	84 ec       	ldi	r24, 0xC4	; 196
     da0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     da2:	e6 e5       	ldi	r30, 0x56	; 86
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	88 23       	and	r24, r24
     daa:	dc f7       	brge	.-10     	; 0xda2 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
     dac:	e3 e2       	ldi	r30, 0x23	; 35
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     dc0:	e6 e5       	ldi	r30, 0x56	; 86
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	84 e8       	ldi	r24, 0x84	; 132
     dc6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     dc8:	e6 e5       	ldi	r30, 0x56	; 86
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	88 23       	and	r24, r24
     dd0:	dc f7       	brge	.-10     	; 0xdc8 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
     dd2:	e3 e2       	ldi	r30, 0x23	; 35
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
}
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	08 95       	ret

00000dde <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	0f 92       	push	r0
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     de8:	e1 e2       	ldi	r30, 0x21	; 33
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	88 7f       	andi	r24, 0xF8	; 248
     df0:	89 83       	std	Y+1, r24	; 0x01
    return status;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
}
     df4:	0f 90       	pop	r0
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	00 d0       	rcall	.+0      	; 0xe02 <GPIO_setupPinDirection+0x6>
     e02:	00 d0       	rcall	.+0      	; 0xe04 <GPIO_setupPinDirection+0x8>
     e04:	0f 92       	push	r0
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	6a 83       	std	Y+2, r22	; 0x02
     e0e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	88 30       	cpi	r24, 0x08	; 8
     e14:	08 f0       	brcs	.+2      	; 0xe18 <GPIO_setupPinDirection+0x1c>
     e16:	d5 c0       	rjmp	.+426    	; 0xfc2 <GPIO_setupPinDirection+0x1c6>
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	84 30       	cpi	r24, 0x04	; 4
     e1c:	08 f0       	brcs	.+2      	; 0xe20 <GPIO_setupPinDirection+0x24>
     e1e:	d1 c0       	rjmp	.+418    	; 0xfc2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	3d 83       	std	Y+5, r19	; 0x05
     e28:	2c 83       	std	Y+4, r18	; 0x04
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	91 05       	cpc	r25, r1
     e32:	09 f4       	brne	.+2      	; 0xe36 <GPIO_setupPinDirection+0x3a>
     e34:	43 c0       	rjmp	.+134    	; 0xebc <GPIO_setupPinDirection+0xc0>
     e36:	2c 81       	ldd	r18, Y+4	; 0x04
     e38:	3d 81       	ldd	r19, Y+5	; 0x05
     e3a:	22 30       	cpi	r18, 0x02	; 2
     e3c:	31 05       	cpc	r19, r1
     e3e:	2c f4       	brge	.+10     	; 0xe4a <GPIO_setupPinDirection+0x4e>
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	71 f0       	breq	.+28     	; 0xe64 <GPIO_setupPinDirection+0x68>
     e48:	bc c0       	rjmp	.+376    	; 0xfc2 <GPIO_setupPinDirection+0x1c6>
     e4a:	2c 81       	ldd	r18, Y+4	; 0x04
     e4c:	3d 81       	ldd	r19, Y+5	; 0x05
     e4e:	22 30       	cpi	r18, 0x02	; 2
     e50:	31 05       	cpc	r19, r1
     e52:	09 f4       	brne	.+2      	; 0xe56 <GPIO_setupPinDirection+0x5a>
     e54:	5f c0       	rjmp	.+190    	; 0xf14 <GPIO_setupPinDirection+0x118>
     e56:	8c 81       	ldd	r24, Y+4	; 0x04
     e58:	9d 81       	ldd	r25, Y+5	; 0x05
     e5a:	83 30       	cpi	r24, 0x03	; 3
     e5c:	91 05       	cpc	r25, r1
     e5e:	09 f4       	brne	.+2      	; 0xe62 <GPIO_setupPinDirection+0x66>
     e60:	85 c0       	rjmp	.+266    	; 0xf6c <GPIO_setupPinDirection+0x170>
     e62:	af c0       	rjmp	.+350    	; 0xfc2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	a1 f4       	brne	.+40     	; 0xe92 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e6a:	aa e3       	ldi	r26, 0x3A	; 58
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	ea e3       	ldi	r30, 0x3A	; 58
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	48 2f       	mov	r20, r24
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <GPIO_setupPinDirection+0x8c>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <GPIO_setupPinDirection+0x88>
     e8c:	84 2b       	or	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	98 c0       	rjmp	.+304    	; 0xfc2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e92:	aa e3       	ldi	r26, 0x3A	; 58
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	ea e3       	ldi	r30, 0x3A	; 58
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_setupPinDirection+0xb4>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_setupPinDirection+0xb0>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	83 c0       	rjmp	.+262    	; 0xfc2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	a1 f4       	brne	.+40     	; 0xeea <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     ec2:	a7 e3       	ldi	r26, 0x37	; 55
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e7 e3       	ldi	r30, 0x37	; 55
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <GPIO_setupPinDirection+0xe4>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <GPIO_setupPinDirection+0xe0>
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	6c c0       	rjmp	.+216    	; 0xfc2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     eea:	a7 e3       	ldi	r26, 0x37	; 55
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e7 e3       	ldi	r30, 0x37	; 55
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <GPIO_setupPinDirection+0x10c>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <GPIO_setupPinDirection+0x108>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	57 c0       	rjmp	.+174    	; 0xfc2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	a1 f4       	brne	.+40     	; 0xf42 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f1a:	a4 e3       	ldi	r26, 0x34	; 52
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e4 e3       	ldi	r30, 0x34	; 52
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <GPIO_setupPinDirection+0x13c>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <GPIO_setupPinDirection+0x138>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	40 c0       	rjmp	.+128    	; 0xfc2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f42:	a4 e3       	ldi	r26, 0x34	; 52
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e4 e3       	ldi	r30, 0x34	; 52
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_setupPinDirection+0x164>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_setupPinDirection+0x160>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	2b c0       	rjmp	.+86     	; 0xfc2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	a1 f4       	brne	.+40     	; 0xf9a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f72:	a1 e3       	ldi	r26, 0x31	; 49
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e1 e3       	ldi	r30, 0x31	; 49
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <GPIO_setupPinDirection+0x194>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <GPIO_setupPinDirection+0x190>
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	14 c0       	rjmp	.+40     	; 0xfc2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f9a:	a1 e3       	ldi	r26, 0x31	; 49
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e1 e3       	ldi	r30, 0x31	; 49
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <GPIO_setupPinDirection+0x1bc>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <GPIO_setupPinDirection+0x1b8>
     fbc:	80 95       	com	r24
     fbe:	84 23       	and	r24, r20
     fc0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <GPIO_writePin+0x6>
     fd8:	00 d0       	rcall	.+0      	; 0xfda <GPIO_writePin+0x8>
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	6a 83       	std	Y+2, r22	; 0x02
     fe4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	88 30       	cpi	r24, 0x08	; 8
     fea:	08 f0       	brcs	.+2      	; 0xfee <GPIO_writePin+0x1c>
     fec:	d5 c0       	rjmp	.+426    	; 0x1198 <GPIO_writePin+0x1c6>
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	84 30       	cpi	r24, 0x04	; 4
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <GPIO_writePin+0x24>
     ff4:	d1 c0       	rjmp	.+418    	; 0x1198 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	3d 83       	std	Y+5, r19	; 0x05
     ffe:	2c 83       	std	Y+4, r18	; 0x04
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	9d 81       	ldd	r25, Y+5	; 0x05
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	91 05       	cpc	r25, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <GPIO_writePin+0x3a>
    100a:	43 c0       	rjmp	.+134    	; 0x1092 <GPIO_writePin+0xc0>
    100c:	2c 81       	ldd	r18, Y+4	; 0x04
    100e:	3d 81       	ldd	r19, Y+5	; 0x05
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	2c f4       	brge	.+10     	; 0x1020 <GPIO_writePin+0x4e>
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	9d 81       	ldd	r25, Y+5	; 0x05
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	71 f0       	breq	.+28     	; 0x103a <GPIO_writePin+0x68>
    101e:	bc c0       	rjmp	.+376    	; 0x1198 <GPIO_writePin+0x1c6>
    1020:	2c 81       	ldd	r18, Y+4	; 0x04
    1022:	3d 81       	ldd	r19, Y+5	; 0x05
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <GPIO_writePin+0x5a>
    102a:	5f c0       	rjmp	.+190    	; 0x10ea <GPIO_writePin+0x118>
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	9d 81       	ldd	r25, Y+5	; 0x05
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	91 05       	cpc	r25, r1
    1034:	09 f4       	brne	.+2      	; 0x1038 <GPIO_writePin+0x66>
    1036:	85 c0       	rjmp	.+266    	; 0x1142 <GPIO_writePin+0x170>
    1038:	af c0       	rjmp	.+350    	; 0x1198 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	a1 f4       	brne	.+40     	; 0x1068 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1040:	ab e3       	ldi	r26, 0x3B	; 59
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	eb e3       	ldi	r30, 0x3B	; 59
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <GPIO_writePin+0x8c>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <GPIO_writePin+0x88>
    1062:	84 2b       	or	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	98 c0       	rjmp	.+304    	; 0x1198 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1068:	ab e3       	ldi	r26, 0x3B	; 59
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	eb e3       	ldi	r30, 0x3B	; 59
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <GPIO_writePin+0xb4>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <GPIO_writePin+0xb0>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	83 c0       	rjmp	.+262    	; 0x1198 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	a1 f4       	brne	.+40     	; 0x10c0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1098:	a8 e3       	ldi	r26, 0x38	; 56
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e3       	ldi	r30, 0x38	; 56
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <GPIO_writePin+0xe4>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <GPIO_writePin+0xe0>
    10ba:	84 2b       	or	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	6c c0       	rjmp	.+216    	; 0x1198 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    10c0:	a8 e3       	ldi	r26, 0x38	; 56
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e8 e3       	ldi	r30, 0x38	; 56
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <GPIO_writePin+0x10c>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <GPIO_writePin+0x108>
    10e2:	80 95       	com	r24
    10e4:	84 23       	and	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	57 c0       	rjmp	.+174    	; 0x1198 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	a1 f4       	brne	.+40     	; 0x1118 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    10f0:	a5 e3       	ldi	r26, 0x35	; 53
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e5 e3       	ldi	r30, 0x35	; 53
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <GPIO_writePin+0x13c>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <GPIO_writePin+0x138>
    1112:	84 2b       	or	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	40 c0       	rjmp	.+128    	; 0x1198 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1118:	a5 e3       	ldi	r26, 0x35	; 53
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e5 e3       	ldi	r30, 0x35	; 53
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 2e       	mov	r0, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <GPIO_writePin+0x164>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	0a 94       	dec	r0
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <GPIO_writePin+0x160>
    113a:	80 95       	com	r24
    113c:	84 23       	and	r24, r20
    113e:	8c 93       	st	X, r24
    1140:	2b c0       	rjmp	.+86     	; 0x1198 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	a1 f4       	brne	.+40     	; 0x1170 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1148:	a2 e3       	ldi	r26, 0x32	; 50
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e2 e3       	ldi	r30, 0x32	; 50
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <GPIO_writePin+0x194>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <GPIO_writePin+0x190>
    116a:	84 2b       	or	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1170:	a2 e3       	ldi	r26, 0x32	; 50
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e2 e3       	ldi	r30, 0x32	; 50
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <GPIO_writePin+0x1bc>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <GPIO_writePin+0x1b8>
    1192:	80 95       	com	r24
    1194:	84 23       	and	r24, r20
    1196:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <GPIO_readPin+0x6>
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <GPIO_readPin+0x8>
    11b0:	0f 92       	push	r0
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    11ba:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	88 30       	cpi	r24, 0x08	; 8
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <GPIO_readPin+0x1c>
    11c2:	84 c0       	rjmp	.+264    	; 0x12cc <GPIO_readPin+0x124>
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	84 30       	cpi	r24, 0x04	; 4
    11c8:	08 f0       	brcs	.+2      	; 0x11cc <GPIO_readPin+0x24>
    11ca:	80 c0       	rjmp	.+256    	; 0x12cc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	3d 83       	std	Y+5, r19	; 0x05
    11d4:	2c 83       	std	Y+4, r18	; 0x04
    11d6:	4c 81       	ldd	r20, Y+4	; 0x04
    11d8:	5d 81       	ldd	r21, Y+5	; 0x05
    11da:	41 30       	cpi	r20, 0x01	; 1
    11dc:	51 05       	cpc	r21, r1
    11de:	79 f1       	breq	.+94     	; 0x123e <GPIO_readPin+0x96>
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	91 05       	cpc	r25, r1
    11e8:	34 f4       	brge	.+12     	; 0x11f6 <GPIO_readPin+0x4e>
    11ea:	2c 81       	ldd	r18, Y+4	; 0x04
    11ec:	3d 81       	ldd	r19, Y+5	; 0x05
    11ee:	21 15       	cp	r18, r1
    11f0:	31 05       	cpc	r19, r1
    11f2:	69 f0       	breq	.+26     	; 0x120e <GPIO_readPin+0x66>
    11f4:	6b c0       	rjmp	.+214    	; 0x12cc <GPIO_readPin+0x124>
    11f6:	4c 81       	ldd	r20, Y+4	; 0x04
    11f8:	5d 81       	ldd	r21, Y+5	; 0x05
    11fa:	42 30       	cpi	r20, 0x02	; 2
    11fc:	51 05       	cpc	r21, r1
    11fe:	b9 f1       	breq	.+110    	; 0x126e <GPIO_readPin+0xc6>
    1200:	8c 81       	ldd	r24, Y+4	; 0x04
    1202:	9d 81       	ldd	r25, Y+5	; 0x05
    1204:	83 30       	cpi	r24, 0x03	; 3
    1206:	91 05       	cpc	r25, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <GPIO_readPin+0x64>
    120a:	49 c0       	rjmp	.+146    	; 0x129e <GPIO_readPin+0xf6>
    120c:	5f c0       	rjmp	.+190    	; 0x12cc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    120e:	e9 e3       	ldi	r30, 0x39	; 57
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a9 01       	movw	r20, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <GPIO_readPin+0x7e>
    1222:	55 95       	asr	r21
    1224:	47 95       	ror	r20
    1226:	8a 95       	dec	r24
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <GPIO_readPin+0x7a>
    122a:	ca 01       	movw	r24, r20
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	90 70       	andi	r25, 0x00	; 0
    1230:	88 23       	and	r24, r24
    1232:	19 f0       	breq	.+6      	; 0x123a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	49 c0       	rjmp	.+146    	; 0x12cc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    123a:	19 82       	std	Y+1, r1	; 0x01
    123c:	47 c0       	rjmp	.+142    	; 0x12cc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    123e:	e6 e3       	ldi	r30, 0x36	; 54
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a9 01       	movw	r20, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_readPin+0xae>
    1252:	55 95       	asr	r21
    1254:	47 95       	ror	r20
    1256:	8a 95       	dec	r24
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_readPin+0xaa>
    125a:	ca 01       	movw	r24, r20
    125c:	81 70       	andi	r24, 0x01	; 1
    125e:	90 70       	andi	r25, 0x00	; 0
    1260:	88 23       	and	r24, r24
    1262:	19 f0       	breq	.+6      	; 0x126a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	31 c0       	rjmp	.+98     	; 0x12cc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    126a:	19 82       	std	Y+1, r1	; 0x01
    126c:	2f c0       	rjmp	.+94     	; 0x12cc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    126e:	e3 e3       	ldi	r30, 0x33	; 51
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a9 01       	movw	r20, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <GPIO_readPin+0xde>
    1282:	55 95       	asr	r21
    1284:	47 95       	ror	r20
    1286:	8a 95       	dec	r24
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <GPIO_readPin+0xda>
    128a:	ca 01       	movw	r24, r20
    128c:	81 70       	andi	r24, 0x01	; 1
    128e:	90 70       	andi	r25, 0x00	; 0
    1290:	88 23       	and	r24, r24
    1292:	19 f0       	breq	.+6      	; 0x129a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	19 c0       	rjmp	.+50     	; 0x12cc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    129a:	19 82       	std	Y+1, r1	; 0x01
    129c:	17 c0       	rjmp	.+46     	; 0x12cc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    129e:	e0 e3       	ldi	r30, 0x30	; 48
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a9 01       	movw	r20, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <GPIO_readPin+0x10e>
    12b2:	55 95       	asr	r21
    12b4:	47 95       	ror	r20
    12b6:	8a 95       	dec	r24
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <GPIO_readPin+0x10a>
    12ba:	ca 01       	movw	r24, r20
    12bc:	81 70       	andi	r24, 0x01	; 1
    12be:	90 70       	andi	r25, 0x00	; 0
    12c0:	88 23       	and	r24, r24
    12c2:	19 f0       	breq	.+6      	; 0x12ca <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12ca:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <GPIO_setupPortDirection+0x6>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <GPIO_setupPortDirection+0x8>
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	84 30       	cpi	r24, 0x04	; 4
    12f2:	90 f5       	brcc	.+100    	; 0x1358 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3c 83       	std	Y+4, r19	; 0x04
    12fc:	2b 83       	std	Y+3, r18	; 0x03
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	91 05       	cpc	r25, r1
    1306:	d1 f0       	breq	.+52     	; 0x133c <GPIO_setupPortDirection+0x5e>
    1308:	2b 81       	ldd	r18, Y+3	; 0x03
    130a:	3c 81       	ldd	r19, Y+4	; 0x04
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	2c f4       	brge	.+10     	; 0x131c <GPIO_setupPortDirection+0x3e>
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	61 f0       	breq	.+24     	; 0x1332 <GPIO_setupPortDirection+0x54>
    131a:	1e c0       	rjmp	.+60     	; 0x1358 <GPIO_setupPortDirection+0x7a>
    131c:	2b 81       	ldd	r18, Y+3	; 0x03
    131e:	3c 81       	ldd	r19, Y+4	; 0x04
    1320:	22 30       	cpi	r18, 0x02	; 2
    1322:	31 05       	cpc	r19, r1
    1324:	81 f0       	breq	.+32     	; 0x1346 <GPIO_setupPortDirection+0x68>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	91 05       	cpc	r25, r1
    132e:	81 f0       	breq	.+32     	; 0x1350 <GPIO_setupPortDirection+0x72>
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1332:	ea e3       	ldi	r30, 0x3A	; 58
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	80 83       	st	Z, r24
    133a:	0e c0       	rjmp	.+28     	; 0x1358 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    133c:	e7 e3       	ldi	r30, 0x37	; 55
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	80 83       	st	Z, r24
    1344:	09 c0       	rjmp	.+18     	; 0x1358 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1346:	e4 e3       	ldi	r30, 0x34	; 52
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	80 83       	st	Z, r24
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1350:	e1 e3       	ldi	r30, 0x31	; 49
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	80 83       	st	Z, r24
			break;
		}
	}
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <GPIO_writePort+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <GPIO_writePort+0x8>
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	84 30       	cpi	r24, 0x04	; 4
    137a:	90 f5       	brcc	.+100    	; 0x13e0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3c 83       	std	Y+4, r19	; 0x04
    1384:	2b 83       	std	Y+3, r18	; 0x03
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	91 05       	cpc	r25, r1
    138e:	d1 f0       	breq	.+52     	; 0x13c4 <GPIO_writePort+0x5e>
    1390:	2b 81       	ldd	r18, Y+3	; 0x03
    1392:	3c 81       	ldd	r19, Y+4	; 0x04
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	2c f4       	brge	.+10     	; 0x13a4 <GPIO_writePort+0x3e>
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	61 f0       	breq	.+24     	; 0x13ba <GPIO_writePort+0x54>
    13a2:	1e c0       	rjmp	.+60     	; 0x13e0 <GPIO_writePort+0x7a>
    13a4:	2b 81       	ldd	r18, Y+3	; 0x03
    13a6:	3c 81       	ldd	r19, Y+4	; 0x04
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	81 f0       	breq	.+32     	; 0x13ce <GPIO_writePort+0x68>
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	91 05       	cpc	r25, r1
    13b6:	81 f0       	breq	.+32     	; 0x13d8 <GPIO_writePort+0x72>
    13b8:	13 c0       	rjmp	.+38     	; 0x13e0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    13ba:	eb e3       	ldi	r30, 0x3B	; 59
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	80 83       	st	Z, r24
    13c2:	0e c0       	rjmp	.+28     	; 0x13e0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    13c4:	e8 e3       	ldi	r30, 0x38	; 56
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	80 83       	st	Z, r24
    13cc:	09 c0       	rjmp	.+18     	; 0x13e0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    13ce:	e5 e3       	ldi	r30, 0x35	; 53
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	80 83       	st	Z, r24
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    13d8:	e2 e3       	ldi	r30, 0x32	; 50
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	80 83       	st	Z, r24
			break;
		}
	}
}
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <GPIO_readPort+0x6>
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <GPIO_readPort+0x8>
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    13fc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	84 30       	cpi	r24, 0x04	; 4
    1402:	90 f5       	brcc	.+100    	; 0x1468 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	3c 83       	std	Y+4, r19	; 0x04
    140c:	2b 83       	std	Y+3, r18	; 0x03
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	91 05       	cpc	r25, r1
    1416:	d1 f0       	breq	.+52     	; 0x144c <GPIO_readPort+0x5e>
    1418:	2b 81       	ldd	r18, Y+3	; 0x03
    141a:	3c 81       	ldd	r19, Y+4	; 0x04
    141c:	22 30       	cpi	r18, 0x02	; 2
    141e:	31 05       	cpc	r19, r1
    1420:	2c f4       	brge	.+10     	; 0x142c <GPIO_readPort+0x3e>
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	61 f0       	breq	.+24     	; 0x1442 <GPIO_readPort+0x54>
    142a:	1e c0       	rjmp	.+60     	; 0x1468 <GPIO_readPort+0x7a>
    142c:	2b 81       	ldd	r18, Y+3	; 0x03
    142e:	3c 81       	ldd	r19, Y+4	; 0x04
    1430:	22 30       	cpi	r18, 0x02	; 2
    1432:	31 05       	cpc	r19, r1
    1434:	81 f0       	breq	.+32     	; 0x1456 <GPIO_readPort+0x68>
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	83 30       	cpi	r24, 0x03	; 3
    143c:	91 05       	cpc	r25, r1
    143e:	81 f0       	breq	.+32     	; 0x1460 <GPIO_readPort+0x72>
    1440:	13 c0       	rjmp	.+38     	; 0x1468 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1442:	e9 e3       	ldi	r30, 0x39	; 57
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	0e c0       	rjmp	.+28     	; 0x1468 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    144c:	e6 e3       	ldi	r30, 0x36	; 54
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	09 c0       	rjmp	.+18     	; 0x1468 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1456:	e3 e3       	ldi	r30, 0x33	; 51
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	04 c0       	rjmp	.+8      	; 0x1468 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1460:	e0 e3       	ldi	r30, 0x30	; 48
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1468:	89 81       	ldd	r24, Y+1	; 0x01
}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../TWI/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <EEPROM_writeByte+0x6>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <EEPROM_writeByte+0x8>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    148a:	0e 94 97 06 	call	0xd2e	; 0xd2e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    148e:	0e 94 ef 06 	call	0xdde	; 0xdde <TWI_getStatus>
    1492:	88 30       	cpi	r24, 0x08	; 8
    1494:	11 f0       	breq	.+4      	; 0x149a <EEPROM_writeByte+0x22>
        return ERROR;
    1496:	1c 82       	std	Y+4, r1	; 0x04
    1498:	28 c0       	rjmp	.+80     	; 0x14ea <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	80 70       	andi	r24, 0x00	; 0
    14a0:	97 70       	andi	r25, 0x07	; 7
    14a2:	88 0f       	add	r24, r24
    14a4:	89 2f       	mov	r24, r25
    14a6:	88 1f       	adc	r24, r24
    14a8:	99 0b       	sbc	r25, r25
    14aa:	91 95       	neg	r25
    14ac:	80 6a       	ori	r24, 0xA0	; 160
    14ae:	0e 94 b2 06 	call	0xd64	; 0xd64 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    14b2:	0e 94 ef 06 	call	0xdde	; 0xdde <TWI_getStatus>
    14b6:	88 31       	cpi	r24, 0x18	; 24
    14b8:	11 f0       	breq	.+4      	; 0x14be <EEPROM_writeByte+0x46>
        return ERROR; 
    14ba:	1c 82       	std	Y+4, r1	; 0x04
    14bc:	16 c0       	rjmp	.+44     	; 0x14ea <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	0e 94 b2 06 	call	0xd64	; 0xd64 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14c4:	0e 94 ef 06 	call	0xdde	; 0xdde <TWI_getStatus>
    14c8:	88 32       	cpi	r24, 0x28	; 40
    14ca:	11 f0       	breq	.+4      	; 0x14d0 <EEPROM_writeByte+0x58>
        return ERROR;
    14cc:	1c 82       	std	Y+4, r1	; 0x04
    14ce:	0d c0       	rjmp	.+26     	; 0x14ea <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	0e 94 b2 06 	call	0xd64	; 0xd64 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14d6:	0e 94 ef 06 	call	0xdde	; 0xdde <TWI_getStatus>
    14da:	88 32       	cpi	r24, 0x28	; 40
    14dc:	11 f0       	breq	.+4      	; 0x14e2 <EEPROM_writeByte+0x6a>
        return ERROR;
    14de:	1c 82       	std	Y+4, r1	; 0x04
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    14e2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TWI_stop>
	
    return SUCCESS;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	8c 83       	std	Y+4, r24	; 0x04
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <EEPROM_readByte+0x6>
    1500:	00 d0       	rcall	.+0      	; 0x1502 <EEPROM_readByte+0x8>
    1502:	0f 92       	push	r0
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	9a 83       	std	Y+2, r25	; 0x02
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	7c 83       	std	Y+4, r23	; 0x04
    150e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1510:	0e 94 97 06 	call	0xd2e	; 0xd2e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1514:	0e 94 ef 06 	call	0xdde	; 0xdde <TWI_getStatus>
    1518:	88 30       	cpi	r24, 0x08	; 8
    151a:	11 f0       	breq	.+4      	; 0x1520 <EEPROM_readByte+0x26>
        return ERROR;
    151c:	1d 82       	std	Y+5, r1	; 0x05
    151e:	44 c0       	rjmp	.+136    	; 0x15a8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	80 70       	andi	r24, 0x00	; 0
    1526:	97 70       	andi	r25, 0x07	; 7
    1528:	88 0f       	add	r24, r24
    152a:	89 2f       	mov	r24, r25
    152c:	88 1f       	adc	r24, r24
    152e:	99 0b       	sbc	r25, r25
    1530:	91 95       	neg	r25
    1532:	80 6a       	ori	r24, 0xA0	; 160
    1534:	0e 94 b2 06 	call	0xd64	; 0xd64 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1538:	0e 94 ef 06 	call	0xdde	; 0xdde <TWI_getStatus>
    153c:	88 31       	cpi	r24, 0x18	; 24
    153e:	11 f0       	breq	.+4      	; 0x1544 <EEPROM_readByte+0x4a>
        return ERROR;
    1540:	1d 82       	std	Y+5, r1	; 0x05
    1542:	32 c0       	rjmp	.+100    	; 0x15a8 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	0e 94 b2 06 	call	0xd64	; 0xd64 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    154a:	0e 94 ef 06 	call	0xdde	; 0xdde <TWI_getStatus>
    154e:	88 32       	cpi	r24, 0x28	; 40
    1550:	11 f0       	breq	.+4      	; 0x1556 <EEPROM_readByte+0x5c>
        return ERROR;
    1552:	1d 82       	std	Y+5, r1	; 0x05
    1554:	29 c0       	rjmp	.+82     	; 0x15a8 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1556:	0e 94 97 06 	call	0xd2e	; 0xd2e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    155a:	0e 94 ef 06 	call	0xdde	; 0xdde <TWI_getStatus>
    155e:	80 31       	cpi	r24, 0x10	; 16
    1560:	11 f0       	breq	.+4      	; 0x1566 <EEPROM_readByte+0x6c>
        return ERROR;
    1562:	1d 82       	std	Y+5, r1	; 0x05
    1564:	21 c0       	rjmp	.+66     	; 0x15a8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	80 70       	andi	r24, 0x00	; 0
    156c:	97 70       	andi	r25, 0x07	; 7
    156e:	88 0f       	add	r24, r24
    1570:	89 2f       	mov	r24, r25
    1572:	88 1f       	adc	r24, r24
    1574:	99 0b       	sbc	r25, r25
    1576:	91 95       	neg	r25
    1578:	81 6a       	ori	r24, 0xA1	; 161
    157a:	0e 94 b2 06 	call	0xd64	; 0xd64 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    157e:	0e 94 ef 06 	call	0xdde	; 0xdde <TWI_getStatus>
    1582:	80 34       	cpi	r24, 0x40	; 64
    1584:	11 f0       	breq	.+4      	; 0x158a <EEPROM_readByte+0x90>
        return ERROR;
    1586:	1d 82       	std	Y+5, r1	; 0x05
    1588:	0f c0       	rjmp	.+30     	; 0x15a8 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    158a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <TWI_readByteWithNACK>
    158e:	eb 81       	ldd	r30, Y+3	; 0x03
    1590:	fc 81       	ldd	r31, Y+4	; 0x04
    1592:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1594:	0e 94 ef 06 	call	0xdde	; 0xdde <TWI_getStatus>
    1598:	88 35       	cpi	r24, 0x58	; 88
    159a:	11 f0       	breq	.+4      	; 0x15a0 <EEPROM_readByte+0xa6>
        return ERROR;
    159c:	1d 82       	std	Y+5, r1	; 0x05
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    15a0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <TWI_stop>

    return SUCCESS;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	8d 83       	std	Y+5, r24	; 0x05
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	64 e0       	ldi	r22, 0x04	; 4
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	65 e0       	ldi	r22, 0x05	; 5
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	66 e0       	ldi	r22, 0x06	; 6
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	6f ef       	ldi	r22, 0xFF	; 255
    15e4:	0e 94 6f 09 	call	0x12de	; 0x12de <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    15e8:	88 e3       	ldi	r24, 0x38	; 56
    15ea:	0e 94 00 0b 	call	0x1600	; 0x1600 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    15ee:	8c e0       	ldi	r24, 0x0C	; 12
    15f0:	0e 94 00 0b 	call	0x1600	; 0x1600 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	0e 94 00 0b 	call	0x1600	; 0x1600 <LCD_sendCommand>
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	e9 97       	sbiw	r28, 0x39	; 57
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	64 e0       	ldi	r22, 0x04	; 4
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	65 e0       	ldi	r22, 0x05	; 5
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_writePin>
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a0 e8       	ldi	r26, 0x80	; 128
    1630:	bf e3       	ldi	r27, 0x3F	; 63
    1632:	8d ab       	std	Y+53, r24	; 0x35
    1634:	9e ab       	std	Y+54, r25	; 0x36
    1636:	af ab       	std	Y+55, r26	; 0x37
    1638:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163a:	6d a9       	ldd	r22, Y+53	; 0x35
    163c:	7e a9       	ldd	r23, Y+54	; 0x36
    163e:	8f a9       	ldd	r24, Y+55	; 0x37
    1640:	98 ad       	ldd	r25, Y+56	; 0x38
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	4a e7       	ldi	r20, 0x7A	; 122
    1648:	53 e4       	ldi	r21, 0x43	; 67
    164a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	89 ab       	std	Y+49, r24	; 0x31
    1654:	9a ab       	std	Y+50, r25	; 0x32
    1656:	ab ab       	std	Y+51, r26	; 0x33
    1658:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    165a:	69 a9       	ldd	r22, Y+49	; 0x31
    165c:	7a a9       	ldd	r23, Y+50	; 0x32
    165e:	8b a9       	ldd	r24, Y+51	; 0x33
    1660:	9c a9       	ldd	r25, Y+52	; 0x34
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e8       	ldi	r20, 0x80	; 128
    1668:	5f e3       	ldi	r21, 0x3F	; 63
    166a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    166e:	88 23       	and	r24, r24
    1670:	2c f4       	brge	.+10     	; 0x167c <LCD_sendCommand+0x7c>
		__ticks = 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	98 ab       	std	Y+48, r25	; 0x30
    1678:	8f a7       	std	Y+47, r24	; 0x2f
    167a:	3f c0       	rjmp	.+126    	; 0x16fa <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    167c:	69 a9       	ldd	r22, Y+49	; 0x31
    167e:	7a a9       	ldd	r23, Y+50	; 0x32
    1680:	8b a9       	ldd	r24, Y+51	; 0x33
    1682:	9c a9       	ldd	r25, Y+52	; 0x34
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	3f ef       	ldi	r19, 0xFF	; 255
    1688:	4f e7       	ldi	r20, 0x7F	; 127
    168a:	57 e4       	ldi	r21, 0x47	; 71
    168c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1690:	18 16       	cp	r1, r24
    1692:	4c f5       	brge	.+82     	; 0x16e6 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1694:	6d a9       	ldd	r22, Y+53	; 0x35
    1696:	7e a9       	ldd	r23, Y+54	; 0x36
    1698:	8f a9       	ldd	r24, Y+55	; 0x37
    169a:	98 ad       	ldd	r25, Y+56	; 0x38
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	40 e2       	ldi	r20, 0x20	; 32
    16a2:	51 e4       	ldi	r21, 0x41	; 65
    16a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	98 ab       	std	Y+48, r25	; 0x30
    16ba:	8f a7       	std	Y+47, r24	; 0x2f
    16bc:	0f c0       	rjmp	.+30     	; 0x16dc <LCD_sendCommand+0xdc>
    16be:	89 e1       	ldi	r24, 0x19	; 25
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	9e a7       	std	Y+46, r25	; 0x2e
    16c4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    16c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <LCD_sendCommand+0xca>
    16ce:	9e a7       	std	Y+46, r25	; 0x2e
    16d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d4:	98 a9       	ldd	r25, Y+48	; 0x30
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	98 ab       	std	Y+48, r25	; 0x30
    16da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    16de:	98 a9       	ldd	r25, Y+48	; 0x30
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	69 f7       	brne	.-38     	; 0x16be <LCD_sendCommand+0xbe>
    16e4:	14 c0       	rjmp	.+40     	; 0x170e <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e6:	69 a9       	ldd	r22, Y+49	; 0x31
    16e8:	7a a9       	ldd	r23, Y+50	; 0x32
    16ea:	8b a9       	ldd	r24, Y+51	; 0x33
    16ec:	9c a9       	ldd	r25, Y+52	; 0x34
    16ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	98 ab       	std	Y+48, r25	; 0x30
    16f8:	8f a7       	std	Y+47, r24	; 0x2f
    16fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    16fc:	98 a9       	ldd	r25, Y+48	; 0x30
    16fe:	9c a7       	std	Y+44, r25	; 0x2c
    1700:	8b a7       	std	Y+43, r24	; 0x2b
    1702:	8b a5       	ldd	r24, Y+43	; 0x2b
    1704:	9c a5       	ldd	r25, Y+44	; 0x2c
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <LCD_sendCommand+0x106>
    170a:	9c a7       	std	Y+44, r25	; 0x2c
    170c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	66 e0       	ldi	r22, 0x06	; 6
    1712:	41 e0       	ldi	r20, 0x01	; 1
    1714:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_writePin>
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	a0 e8       	ldi	r26, 0x80	; 128
    171e:	bf e3       	ldi	r27, 0x3F	; 63
    1720:	8f a3       	std	Y+39, r24	; 0x27
    1722:	98 a7       	std	Y+40, r25	; 0x28
    1724:	a9 a7       	std	Y+41, r26	; 0x29
    1726:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1728:	6f a1       	ldd	r22, Y+39	; 0x27
    172a:	78 a5       	ldd	r23, Y+40	; 0x28
    172c:	89 a5       	ldd	r24, Y+41	; 0x29
    172e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	4a e7       	ldi	r20, 0x7A	; 122
    1736:	53 e4       	ldi	r21, 0x43	; 67
    1738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	8b a3       	std	Y+35, r24	; 0x23
    1742:	9c a3       	std	Y+36, r25	; 0x24
    1744:	ad a3       	std	Y+37, r26	; 0x25
    1746:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1748:	6b a1       	ldd	r22, Y+35	; 0x23
    174a:	7c a1       	ldd	r23, Y+36	; 0x24
    174c:	8d a1       	ldd	r24, Y+37	; 0x25
    174e:	9e a1       	ldd	r25, Y+38	; 0x26
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e8       	ldi	r20, 0x80	; 128
    1756:	5f e3       	ldi	r21, 0x3F	; 63
    1758:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    175c:	88 23       	and	r24, r24
    175e:	2c f4       	brge	.+10     	; 0x176a <LCD_sendCommand+0x16a>
		__ticks = 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9a a3       	std	Y+34, r25	; 0x22
    1766:	89 a3       	std	Y+33, r24	; 0x21
    1768:	3f c0       	rjmp	.+126    	; 0x17e8 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    176a:	6b a1       	ldd	r22, Y+35	; 0x23
    176c:	7c a1       	ldd	r23, Y+36	; 0x24
    176e:	8d a1       	ldd	r24, Y+37	; 0x25
    1770:	9e a1       	ldd	r25, Y+38	; 0x26
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	3f ef       	ldi	r19, 0xFF	; 255
    1776:	4f e7       	ldi	r20, 0x7F	; 127
    1778:	57 e4       	ldi	r21, 0x47	; 71
    177a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    177e:	18 16       	cp	r1, r24
    1780:	4c f5       	brge	.+82     	; 0x17d4 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1782:	6f a1       	ldd	r22, Y+39	; 0x27
    1784:	78 a5       	ldd	r23, Y+40	; 0x28
    1786:	89 a5       	ldd	r24, Y+41	; 0x29
    1788:	9a a5       	ldd	r25, Y+42	; 0x2a
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e2       	ldi	r20, 0x20	; 32
    1790:	51 e4       	ldi	r21, 0x41	; 65
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	bc 01       	movw	r22, r24
    179c:	cd 01       	movw	r24, r26
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9a a3       	std	Y+34, r25	; 0x22
    17a8:	89 a3       	std	Y+33, r24	; 0x21
    17aa:	0f c0       	rjmp	.+30     	; 0x17ca <LCD_sendCommand+0x1ca>
    17ac:	89 e1       	ldi	r24, 0x19	; 25
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	98 a3       	std	Y+32, r25	; 0x20
    17b2:	8f 8f       	std	Y+31, r24	; 0x1f
    17b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17b6:	98 a1       	ldd	r25, Y+32	; 0x20
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <LCD_sendCommand+0x1b8>
    17bc:	98 a3       	std	Y+32, r25	; 0x20
    17be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c0:	89 a1       	ldd	r24, Y+33	; 0x21
    17c2:	9a a1       	ldd	r25, Y+34	; 0x22
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	9a a3       	std	Y+34, r25	; 0x22
    17c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ca:	89 a1       	ldd	r24, Y+33	; 0x21
    17cc:	9a a1       	ldd	r25, Y+34	; 0x22
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	69 f7       	brne	.-38     	; 0x17ac <LCD_sendCommand+0x1ac>
    17d2:	14 c0       	rjmp	.+40     	; 0x17fc <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d4:	6b a1       	ldd	r22, Y+35	; 0x23
    17d6:	7c a1       	ldd	r23, Y+36	; 0x24
    17d8:	8d a1       	ldd	r24, Y+37	; 0x25
    17da:	9e a1       	ldd	r25, Y+38	; 0x26
    17dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	9a a3       	std	Y+34, r25	; 0x22
    17e6:	89 a3       	std	Y+33, r24	; 0x21
    17e8:	89 a1       	ldd	r24, Y+33	; 0x21
    17ea:	9a a1       	ldd	r25, Y+34	; 0x22
    17ec:	9e 8f       	std	Y+30, r25	; 0x1e
    17ee:	8d 8f       	std	Y+29, r24	; 0x1d
    17f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <LCD_sendCommand+0x1f4>
    17f8:	9e 8f       	std	Y+30, r25	; 0x1e
    17fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	69 ad       	ldd	r22, Y+57	; 0x39
    1800:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_writePort>
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 e8       	ldi	r26, 0x80	; 128
    180a:	bf e3       	ldi	r27, 0x3F	; 63
    180c:	89 8f       	std	Y+25, r24	; 0x19
    180e:	9a 8f       	std	Y+26, r25	; 0x1a
    1810:	ab 8f       	std	Y+27, r26	; 0x1b
    1812:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1814:	69 8d       	ldd	r22, Y+25	; 0x19
    1816:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1818:	8b 8d       	ldd	r24, Y+27	; 0x1b
    181a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4a e7       	ldi	r20, 0x7A	; 122
    1822:	53 e4       	ldi	r21, 0x43	; 67
    1824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	8d 8b       	std	Y+21, r24	; 0x15
    182e:	9e 8b       	std	Y+22, r25	; 0x16
    1830:	af 8b       	std	Y+23, r26	; 0x17
    1832:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1834:	6d 89       	ldd	r22, Y+21	; 0x15
    1836:	7e 89       	ldd	r23, Y+22	; 0x16
    1838:	8f 89       	ldd	r24, Y+23	; 0x17
    183a:	98 8d       	ldd	r25, Y+24	; 0x18
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e8       	ldi	r20, 0x80	; 128
    1842:	5f e3       	ldi	r21, 0x3F	; 63
    1844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1848:	88 23       	and	r24, r24
    184a:	2c f4       	brge	.+10     	; 0x1856 <LCD_sendCommand+0x256>
		__ticks = 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9c 8b       	std	Y+20, r25	; 0x14
    1852:	8b 8b       	std	Y+19, r24	; 0x13
    1854:	3f c0       	rjmp	.+126    	; 0x18d4 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1856:	6d 89       	ldd	r22, Y+21	; 0x15
    1858:	7e 89       	ldd	r23, Y+22	; 0x16
    185a:	8f 89       	ldd	r24, Y+23	; 0x17
    185c:	98 8d       	ldd	r25, Y+24	; 0x18
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	3f ef       	ldi	r19, 0xFF	; 255
    1862:	4f e7       	ldi	r20, 0x7F	; 127
    1864:	57 e4       	ldi	r21, 0x47	; 71
    1866:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    186a:	18 16       	cp	r1, r24
    186c:	4c f5       	brge	.+82     	; 0x18c0 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186e:	69 8d       	ldd	r22, Y+25	; 0x19
    1870:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1872:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1874:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e2       	ldi	r20, 0x20	; 32
    187c:	51 e4       	ldi	r21, 0x41	; 65
    187e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	9c 8b       	std	Y+20, r25	; 0x14
    1894:	8b 8b       	std	Y+19, r24	; 0x13
    1896:	0f c0       	rjmp	.+30     	; 0x18b6 <LCD_sendCommand+0x2b6>
    1898:	89 e1       	ldi	r24, 0x19	; 25
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9a 8b       	std	Y+18, r25	; 0x12
    189e:	89 8b       	std	Y+17, r24	; 0x11
    18a0:	89 89       	ldd	r24, Y+17	; 0x11
    18a2:	9a 89       	ldd	r25, Y+18	; 0x12
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <LCD_sendCommand+0x2a4>
    18a8:	9a 8b       	std	Y+18, r25	; 0x12
    18aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ac:	8b 89       	ldd	r24, Y+19	; 0x13
    18ae:	9c 89       	ldd	r25, Y+20	; 0x14
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	9c 8b       	std	Y+20, r25	; 0x14
    18b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b6:	8b 89       	ldd	r24, Y+19	; 0x13
    18b8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	69 f7       	brne	.-38     	; 0x1898 <LCD_sendCommand+0x298>
    18be:	14 c0       	rjmp	.+40     	; 0x18e8 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c0:	6d 89       	ldd	r22, Y+21	; 0x15
    18c2:	7e 89       	ldd	r23, Y+22	; 0x16
    18c4:	8f 89       	ldd	r24, Y+23	; 0x17
    18c6:	98 8d       	ldd	r25, Y+24	; 0x18
    18c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	9c 8b       	std	Y+20, r25	; 0x14
    18d2:	8b 8b       	std	Y+19, r24	; 0x13
    18d4:	8b 89       	ldd	r24, Y+19	; 0x13
    18d6:	9c 89       	ldd	r25, Y+20	; 0x14
    18d8:	98 8b       	std	Y+16, r25	; 0x10
    18da:	8f 87       	std	Y+15, r24	; 0x0f
    18dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18de:	98 89       	ldd	r25, Y+16	; 0x10
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <LCD_sendCommand+0x2e0>
    18e4:	98 8b       	std	Y+16, r25	; 0x10
    18e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	66 e0       	ldi	r22, 0x06	; 6
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_writePin>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a0 e8       	ldi	r26, 0x80	; 128
    18f8:	bf e3       	ldi	r27, 0x3F	; 63
    18fa:	8b 87       	std	Y+11, r24	; 0x0b
    18fc:	9c 87       	std	Y+12, r25	; 0x0c
    18fe:	ad 87       	std	Y+13, r26	; 0x0d
    1900:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1902:	6b 85       	ldd	r22, Y+11	; 0x0b
    1904:	7c 85       	ldd	r23, Y+12	; 0x0c
    1906:	8d 85       	ldd	r24, Y+13	; 0x0d
    1908:	9e 85       	ldd	r25, Y+14	; 0x0e
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	4a e7       	ldi	r20, 0x7A	; 122
    1910:	53 e4       	ldi	r21, 0x43	; 67
    1912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	8f 83       	std	Y+7, r24	; 0x07
    191c:	98 87       	std	Y+8, r25	; 0x08
    191e:	a9 87       	std	Y+9, r26	; 0x09
    1920:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1922:	6f 81       	ldd	r22, Y+7	; 0x07
    1924:	78 85       	ldd	r23, Y+8	; 0x08
    1926:	89 85       	ldd	r24, Y+9	; 0x09
    1928:	9a 85       	ldd	r25, Y+10	; 0x0a
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e8       	ldi	r20, 0x80	; 128
    1930:	5f e3       	ldi	r21, 0x3F	; 63
    1932:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1936:	88 23       	and	r24, r24
    1938:	2c f4       	brge	.+10     	; 0x1944 <LCD_sendCommand+0x344>
		__ticks = 1;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9e 83       	std	Y+6, r25	; 0x06
    1940:	8d 83       	std	Y+5, r24	; 0x05
    1942:	3f c0       	rjmp	.+126    	; 0x19c2 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1944:	6f 81       	ldd	r22, Y+7	; 0x07
    1946:	78 85       	ldd	r23, Y+8	; 0x08
    1948:	89 85       	ldd	r24, Y+9	; 0x09
    194a:	9a 85       	ldd	r25, Y+10	; 0x0a
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	3f ef       	ldi	r19, 0xFF	; 255
    1950:	4f e7       	ldi	r20, 0x7F	; 127
    1952:	57 e4       	ldi	r21, 0x47	; 71
    1954:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1958:	18 16       	cp	r1, r24
    195a:	4c f5       	brge	.+82     	; 0x19ae <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195c:	6b 85       	ldd	r22, Y+11	; 0x0b
    195e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1960:	8d 85       	ldd	r24, Y+13	; 0x0d
    1962:	9e 85       	ldd	r25, Y+14	; 0x0e
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e2       	ldi	r20, 0x20	; 32
    196a:	51 e4       	ldi	r21, 0x41	; 65
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	bc 01       	movw	r22, r24
    1976:	cd 01       	movw	r24, r26
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	9e 83       	std	Y+6, r25	; 0x06
    1982:	8d 83       	std	Y+5, r24	; 0x05
    1984:	0f c0       	rjmp	.+30     	; 0x19a4 <LCD_sendCommand+0x3a4>
    1986:	89 e1       	ldi	r24, 0x19	; 25
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9c 83       	std	Y+4, r25	; 0x04
    198c:	8b 83       	std	Y+3, r24	; 0x03
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <LCD_sendCommand+0x392>
    1996:	9c 83       	std	Y+4, r25	; 0x04
    1998:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	9e 81       	ldd	r25, Y+6	; 0x06
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	9e 81       	ldd	r25, Y+6	; 0x06
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	69 f7       	brne	.-38     	; 0x1986 <LCD_sendCommand+0x386>
    19ac:	14 c0       	rjmp	.+40     	; 0x19d6 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ae:	6f 81       	ldd	r22, Y+7	; 0x07
    19b0:	78 85       	ldd	r23, Y+8	; 0x08
    19b2:	89 85       	ldd	r24, Y+9	; 0x09
    19b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	9e 83       	std	Y+6, r25	; 0x06
    19c0:	8d 83       	std	Y+5, r24	; 0x05
    19c2:	8d 81       	ldd	r24, Y+5	; 0x05
    19c4:	9e 81       	ldd	r25, Y+6	; 0x06
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	89 83       	std	Y+1, r24	; 0x01
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	9a 81       	ldd	r25, Y+2	; 0x02
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <LCD_sendCommand+0x3ce>
    19d2:	9a 83       	std	Y+2, r25	; 0x02
    19d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    19d6:	e9 96       	adiw	r28, 0x39	; 57
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	e9 97       	sbiw	r28, 0x39	; 57
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	64 e0       	ldi	r22, 0x04	; 4
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	65 e0       	ldi	r22, 0x05	; 5
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_writePin>
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a0 e8       	ldi	r26, 0x80	; 128
    1a18:	bf e3       	ldi	r27, 0x3F	; 63
    1a1a:	8d ab       	std	Y+53, r24	; 0x35
    1a1c:	9e ab       	std	Y+54, r25	; 0x36
    1a1e:	af ab       	std	Y+55, r26	; 0x37
    1a20:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a22:	6d a9       	ldd	r22, Y+53	; 0x35
    1a24:	7e a9       	ldd	r23, Y+54	; 0x36
    1a26:	8f a9       	ldd	r24, Y+55	; 0x37
    1a28:	98 ad       	ldd	r25, Y+56	; 0x38
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	4a e7       	ldi	r20, 0x7A	; 122
    1a30:	53 e4       	ldi	r21, 0x43	; 67
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	89 ab       	std	Y+49, r24	; 0x31
    1a3c:	9a ab       	std	Y+50, r25	; 0x32
    1a3e:	ab ab       	std	Y+51, r26	; 0x33
    1a40:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a42:	69 a9       	ldd	r22, Y+49	; 0x31
    1a44:	7a a9       	ldd	r23, Y+50	; 0x32
    1a46:	8b a9       	ldd	r24, Y+51	; 0x33
    1a48:	9c a9       	ldd	r25, Y+52	; 0x34
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e8       	ldi	r20, 0x80	; 128
    1a50:	5f e3       	ldi	r21, 0x3F	; 63
    1a52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a56:	88 23       	and	r24, r24
    1a58:	2c f4       	brge	.+10     	; 0x1a64 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	98 ab       	std	Y+48, r25	; 0x30
    1a60:	8f a7       	std	Y+47, r24	; 0x2f
    1a62:	3f c0       	rjmp	.+126    	; 0x1ae2 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1a64:	69 a9       	ldd	r22, Y+49	; 0x31
    1a66:	7a a9       	ldd	r23, Y+50	; 0x32
    1a68:	8b a9       	ldd	r24, Y+51	; 0x33
    1a6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	4c f5       	brge	.+82     	; 0x1ace <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a7e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a80:	8f a9       	ldd	r24, Y+55	; 0x37
    1a82:	98 ad       	ldd	r25, Y+56	; 0x38
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e2       	ldi	r20, 0x20	; 32
    1a8a:	51 e4       	ldi	r21, 0x41	; 65
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	98 ab       	std	Y+48, r25	; 0x30
    1aa2:	8f a7       	std	Y+47, r24	; 0x2f
    1aa4:	0f c0       	rjmp	.+30     	; 0x1ac4 <LCD_displayCharacter+0xdc>
    1aa6:	89 e1       	ldi	r24, 0x19	; 25
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	9e a7       	std	Y+46, r25	; 0x2e
    1aac:	8d a7       	std	Y+45, r24	; 0x2d
    1aae:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ab0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <LCD_displayCharacter+0xca>
    1ab6:	9e a7       	std	Y+46, r25	; 0x2e
    1ab8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1abc:	98 a9       	ldd	r25, Y+48	; 0x30
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	98 ab       	std	Y+48, r25	; 0x30
    1ac2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	69 f7       	brne	.-38     	; 0x1aa6 <LCD_displayCharacter+0xbe>
    1acc:	14 c0       	rjmp	.+40     	; 0x1af6 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ace:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	98 ab       	std	Y+48, r25	; 0x30
    1ae0:	8f a7       	std	Y+47, r24	; 0x2f
    1ae2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae6:	9c a7       	std	Y+44, r25	; 0x2c
    1ae8:	8b a7       	std	Y+43, r24	; 0x2b
    1aea:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aec:	9c a5       	ldd	r25, Y+44	; 0x2c
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <LCD_displayCharacter+0x106>
    1af2:	9c a7       	std	Y+44, r25	; 0x2c
    1af4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	66 e0       	ldi	r22, 0x06	; 6
    1afa:	41 e0       	ldi	r20, 0x01	; 1
    1afc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_writePin>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a0 e8       	ldi	r26, 0x80	; 128
    1b06:	bf e3       	ldi	r27, 0x3F	; 63
    1b08:	8f a3       	std	Y+39, r24	; 0x27
    1b0a:	98 a7       	std	Y+40, r25	; 0x28
    1b0c:	a9 a7       	std	Y+41, r26	; 0x29
    1b0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b10:	6f a1       	ldd	r22, Y+39	; 0x27
    1b12:	78 a5       	ldd	r23, Y+40	; 0x28
    1b14:	89 a5       	ldd	r24, Y+41	; 0x29
    1b16:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	4a e7       	ldi	r20, 0x7A	; 122
    1b1e:	53 e4       	ldi	r21, 0x43	; 67
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	8b a3       	std	Y+35, r24	; 0x23
    1b2a:	9c a3       	std	Y+36, r25	; 0x24
    1b2c:	ad a3       	std	Y+37, r26	; 0x25
    1b2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b30:	6b a1       	ldd	r22, Y+35	; 0x23
    1b32:	7c a1       	ldd	r23, Y+36	; 0x24
    1b34:	8d a1       	ldd	r24, Y+37	; 0x25
    1b36:	9e a1       	ldd	r25, Y+38	; 0x26
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	2c f4       	brge	.+10     	; 0x1b52 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	9a a3       	std	Y+34, r25	; 0x22
    1b4e:	89 a3       	std	Y+33, r24	; 0x21
    1b50:	3f c0       	rjmp	.+126    	; 0x1bd0 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1b52:	6b a1       	ldd	r22, Y+35	; 0x23
    1b54:	7c a1       	ldd	r23, Y+36	; 0x24
    1b56:	8d a1       	ldd	r24, Y+37	; 0x25
    1b58:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	3f ef       	ldi	r19, 0xFF	; 255
    1b5e:	4f e7       	ldi	r20, 0x7F	; 127
    1b60:	57 e4       	ldi	r21, 0x47	; 71
    1b62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b66:	18 16       	cp	r1, r24
    1b68:	4c f5       	brge	.+82     	; 0x1bbc <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e2       	ldi	r20, 0x20	; 32
    1b78:	51 e4       	ldi	r21, 0x41	; 65
    1b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9a a3       	std	Y+34, r25	; 0x22
    1b90:	89 a3       	std	Y+33, r24	; 0x21
    1b92:	0f c0       	rjmp	.+30     	; 0x1bb2 <LCD_displayCharacter+0x1ca>
    1b94:	89 e1       	ldi	r24, 0x19	; 25
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	98 a3       	std	Y+32, r25	; 0x20
    1b9a:	8f 8f       	std	Y+31, r24	; 0x1f
    1b9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b9e:	98 a1       	ldd	r25, Y+32	; 0x20
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <LCD_displayCharacter+0x1b8>
    1ba4:	98 a3       	std	Y+32, r25	; 0x20
    1ba6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba8:	89 a1       	ldd	r24, Y+33	; 0x21
    1baa:	9a a1       	ldd	r25, Y+34	; 0x22
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	9a a3       	std	Y+34, r25	; 0x22
    1bb0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	69 f7       	brne	.-38     	; 0x1b94 <LCD_displayCharacter+0x1ac>
    1bba:	14 c0       	rjmp	.+40     	; 0x1be4 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9a a3       	std	Y+34, r25	; 0x22
    1bce:	89 a3       	std	Y+33, r24	; 0x21
    1bd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd4:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd6:	8d 8f       	std	Y+29, r24	; 0x1d
    1bd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_displayCharacter+0x1f4>
    1be0:	9e 8f       	std	Y+30, r25	; 0x1e
    1be2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	69 ad       	ldd	r22, Y+57	; 0x39
    1be8:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_writePort>
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a0 e8       	ldi	r26, 0x80	; 128
    1bf2:	bf e3       	ldi	r27, 0x3F	; 63
    1bf4:	89 8f       	std	Y+25, r24	; 0x19
    1bf6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bf8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bfa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4a e7       	ldi	r20, 0x7A	; 122
    1c0a:	53 e4       	ldi	r21, 0x43	; 67
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	8d 8b       	std	Y+21, r24	; 0x15
    1c16:	9e 8b       	std	Y+22, r25	; 0x16
    1c18:	af 8b       	std	Y+23, r26	; 0x17
    1c1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c20:	8f 89       	ldd	r24, Y+23	; 0x17
    1c22:	98 8d       	ldd	r25, Y+24	; 0x18
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <LCD_displayCharacter+0x256>
		__ticks = 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 8b       	std	Y+20, r25	; 0x14
    1c3a:	8b 8b       	std	Y+19, r24	; 0x13
    1c3c:	3f c0       	rjmp	.+126    	; 0x1cbc <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c40:	7e 89       	ldd	r23, Y+22	; 0x16
    1c42:	8f 89       	ldd	r24, Y+23	; 0x17
    1c44:	98 8d       	ldd	r25, Y+24	; 0x18
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	4c f5       	brge	.+82     	; 0x1ca8 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	69 8d       	ldd	r22, Y+25	; 0x19
    1c58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e2       	ldi	r20, 0x20	; 32
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9c 8b       	std	Y+20, r25	; 0x14
    1c7c:	8b 8b       	std	Y+19, r24	; 0x13
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <LCD_displayCharacter+0x2b6>
    1c80:	89 e1       	ldi	r24, 0x19	; 25
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9a 8b       	std	Y+18, r25	; 0x12
    1c86:	89 8b       	std	Y+17, r24	; 0x11
    1c88:	89 89       	ldd	r24, Y+17	; 0x11
    1c8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <LCD_displayCharacter+0x2a4>
    1c90:	9a 8b       	std	Y+18, r25	; 0x12
    1c92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	8b 89       	ldd	r24, Y+19	; 0x13
    1c96:	9c 89       	ldd	r25, Y+20	; 0x14
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	9c 8b       	std	Y+20, r25	; 0x14
    1c9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <LCD_displayCharacter+0x298>
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    1caa:	7e 89       	ldd	r23, Y+22	; 0x16
    1cac:	8f 89       	ldd	r24, Y+23	; 0x17
    1cae:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9c 8b       	std	Y+20, r25	; 0x14
    1cba:	8b 8b       	std	Y+19, r24	; 0x13
    1cbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc0:	98 8b       	std	Y+16, r25	; 0x10
    1cc2:	8f 87       	std	Y+15, r24	; 0x0f
    1cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc6:	98 89       	ldd	r25, Y+16	; 0x10
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <LCD_displayCharacter+0x2e0>
    1ccc:	98 8b       	std	Y+16, r25	; 0x10
    1cce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	66 e0       	ldi	r22, 0x06	; 6
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <GPIO_writePin>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a0 e8       	ldi	r26, 0x80	; 128
    1ce0:	bf e3       	ldi	r27, 0x3F	; 63
    1ce2:	8b 87       	std	Y+11, r24	; 0x0b
    1ce4:	9c 87       	std	Y+12, r25	; 0x0c
    1ce6:	ad 87       	std	Y+13, r26	; 0x0d
    1ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a e7       	ldi	r20, 0x7A	; 122
    1cf8:	53 e4       	ldi	r21, 0x43	; 67
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	8f 83       	std	Y+7, r24	; 0x07
    1d04:	98 87       	std	Y+8, r25	; 0x08
    1d06:	a9 87       	std	Y+9, r26	; 0x09
    1d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0c:	78 85       	ldd	r23, Y+8	; 0x08
    1d0e:	89 85       	ldd	r24, Y+9	; 0x09
    1d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <LCD_displayCharacter+0x344>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2e:	78 85       	ldd	r23, Y+8	; 0x08
    1d30:	89 85       	ldd	r24, Y+9	; 0x09
    1d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	4f e7       	ldi	r20, 0x7F	; 127
    1d3a:	57 e4       	ldi	r21, 0x47	; 71
    1d3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d40:	18 16       	cp	r1, r24
    1d42:	4c f5       	brge	.+82     	; 0x1d96 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <LCD_displayCharacter+0x3a4>
    1d6e:	89 e1       	ldi	r24, 0x19	; 25
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9c 83       	std	Y+4, r25	; 0x04
    1d74:	8b 83       	std	Y+3, r24	; 0x03
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <LCD_displayCharacter+0x392>
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <LCD_displayCharacter+0x386>
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	6f 81       	ldd	r22, Y+7	; 0x07
    1d98:	78 85       	ldd	r23, Y+8	; 0x08
    1d9a:	89 85       	ldd	r24, Y+9	; 0x09
    1d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9e 83       	std	Y+6, r25	; 0x06
    1da8:	8d 83       	std	Y+5, r24	; 0x05
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_displayCharacter+0x3ce>
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1dbe:	e9 96       	adiw	r28, 0x39	; 57
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <LCD_displayString+0x6>
    1dd6:	0f 92       	push	r0
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	9b 83       	std	Y+3, r25	; 0x03
    1dde:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1de0:	19 82       	std	Y+1, r1	; 0x01
    1de2:	0e c0       	rjmp	.+28     	; 0x1e00 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	9b 81       	ldd	r25, Y+3	; 0x03
    1dee:	fc 01       	movw	r30, r24
    1df0:	e2 0f       	add	r30, r18
    1df2:	f3 1f       	adc	r31, r19
    1df4:	80 81       	ld	r24, Z
    1df6:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <LCD_displayCharacter>
		i++;
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	8f 5f       	subi	r24, 0xFF	; 255
    1dfe:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	e2 0f       	add	r30, r18
    1e0e:	f3 1f       	adc	r31, r19
    1e10:	80 81       	ld	r24, Z
    1e12:	88 23       	and	r24, r24
    1e14:	39 f7       	brne	.-50     	; 0x1de4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <LCD_moveCursor+0x6>
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <LCD_moveCursor+0x8>
    1e2a:	0f 92       	push	r0
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	8a 83       	std	Y+2, r24	; 0x02
    1e32:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	3d 83       	std	Y+5, r19	; 0x05
    1e3c:	2c 83       	std	Y+4, r18	; 0x04
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	91 05       	cpc	r25, r1
    1e46:	c1 f0       	breq	.+48     	; 0x1e78 <LCD_moveCursor+0x56>
    1e48:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e4c:	22 30       	cpi	r18, 0x02	; 2
    1e4e:	31 05       	cpc	r19, r1
    1e50:	2c f4       	brge	.+10     	; 0x1e5c <LCD_moveCursor+0x3a>
    1e52:	8c 81       	ldd	r24, Y+4	; 0x04
    1e54:	9d 81       	ldd	r25, Y+5	; 0x05
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	61 f0       	breq	.+24     	; 0x1e72 <LCD_moveCursor+0x50>
    1e5a:	19 c0       	rjmp	.+50     	; 0x1e8e <LCD_moveCursor+0x6c>
    1e5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e60:	22 30       	cpi	r18, 0x02	; 2
    1e62:	31 05       	cpc	r19, r1
    1e64:	69 f0       	breq	.+26     	; 0x1e80 <LCD_moveCursor+0x5e>
    1e66:	8c 81       	ldd	r24, Y+4	; 0x04
    1e68:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6a:	83 30       	cpi	r24, 0x03	; 3
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	61 f0       	breq	.+24     	; 0x1e88 <LCD_moveCursor+0x66>
    1e70:	0e c0       	rjmp	.+28     	; 0x1e8e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	0b c0       	rjmp	.+22     	; 0x1e8e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	80 5c       	subi	r24, 0xC0	; 192
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	07 c0       	rjmp	.+14     	; 0x1e8e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	80 5f       	subi	r24, 0xF0	; 240
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	03 c0       	rjmp	.+6      	; 0x1e8e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	80 5b       	subi	r24, 0xB0	; 176
    1e8c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	80 68       	ori	r24, 0x80	; 128
    1e92:	0e 94 00 0b 	call	0x1600	; 0x1600 <LCD_sendCommand>
}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <LCD_displayStringRowColumn+0x6>
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <LCD_displayStringRowColumn+0x8>
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	6a 83       	std	Y+2, r22	; 0x02
    1eb6:	5c 83       	std	Y+4, r21	; 0x04
    1eb8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	6a 81       	ldd	r22, Y+2	; 0x02
    1ebe:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_displayString>
}
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	62 97       	sbiw	r28, 0x12	; 18
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	9a 8b       	std	Y+18, r25	; 0x12
    1eee:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1ef0:	89 89       	ldd	r24, Y+17	; 0x11
    1ef2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef4:	9e 01       	movw	r18, r28
    1ef6:	2f 5f       	subi	r18, 0xFF	; 255
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	b9 01       	movw	r22, r18
    1efc:	4a e0       	ldi	r20, 0x0A	; 10
    1efe:	50 e0       	ldi	r21, 0x00	; 0
    1f00:	0e 94 a4 12 	call	0x2548	; 0x2548 <itoa>
   LCD_displayString(buff); /* Display the string */
    1f04:	ce 01       	movw	r24, r28
    1f06:	01 96       	adiw	r24, 0x01	; 1
    1f08:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_displayString>
}
    1f0c:	62 96       	adiw	r28, 0x12	; 18
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	0e 94 00 0b 	call	0x1600	; 0x1600 <LCD_sendCommand>
}
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <KEYPAD_getPressedKey+0x6>
    1f38:	0f 92       	push	r0
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1f3e:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1f40:	1b 82       	std	Y+3, r1	; 0x03
    1f42:	43 c0       	rjmp	.+134    	; 0x1fca <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	0e 94 6f 09 	call	0x12de	; 0x12de <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	98 2f       	mov	r25, r24
    1f50:	9c 5f       	subi	r25, 0xFC	; 252
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	69 2f       	mov	r22, r25
    1f56:	41 e0       	ldi	r20, 0x01	; 1
    1f58:	0e 94 fe 06 	call	0xdfc	; 0xdfc <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	9c 01       	movw	r18, r24
    1f64:	2c 5f       	subi	r18, 0xFC	; 252
    1f66:	3f 4f       	sbci	r19, 0xFF	; 255
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <KEYPAD_getPressedKey+0x40>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	2a 95       	dec	r18
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <KEYPAD_getPressedKey+0x3c>
    1f76:	80 95       	com	r24
    1f78:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	69 81       	ldd	r22, Y+1	; 0x01
    1f7e:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1f82:	1a 82       	std	Y+2, r1	; 0x02
    1f84:	1c c0       	rjmp	.+56     	; 0x1fbe <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	6a 81       	ldd	r22, Y+2	; 0x02
    1f8a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <GPIO_readPin>
    1f8e:	88 23       	and	r24, r24
    1f90:	99 f4       	brne	.+38     	; 0x1fb8 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	88 2f       	mov	r24, r24
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	98 2f       	mov	r25, r24
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	89 0f       	add	r24, r25
    1fa6:	8f 5f       	subi	r24, 0xFF	; 255
    1fa8:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	8f 5f       	subi	r24, 0xFF	; 255
    1fbc:	8a 83       	std	Y+2, r24	; 0x02
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	84 30       	cpi	r24, 0x04	; 4
    1fc2:	08 f3       	brcs	.-62     	; 0x1f86 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	8f 5f       	subi	r24, 0xFF	; 255
    1fc8:	8b 83       	std	Y+3, r24	; 0x03
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	84 30       	cpi	r24, 0x04	; 4
    1fce:	08 f4       	brcc	.+2      	; 0x1fd2 <KEYPAD_getPressedKey+0xa0>
    1fd0:	b9 cf       	rjmp	.-142    	; 0x1f44 <KEYPAD_getPressedKey+0x12>
    1fd2:	b6 cf       	rjmp	.-148    	; 0x1f40 <KEYPAD_getPressedKey+0xe>

00001fd4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <KEYPAD_4x4_adjustKeyNumber+0x6>
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <KEYPAD_4x4_adjustKeyNumber+0x8>
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1fe2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	3c 83       	std	Y+4, r19	; 0x04
    1fec:	2b 83       	std	Y+3, r18	; 0x03
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	88 30       	cpi	r24, 0x08	; 8
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <KEYPAD_4x4_adjustKeyNumber+0x26>
    1ff8:	70 c0       	rjmp	.+224    	; 0x20da <KEYPAD_4x4_adjustKeyNumber+0x106>
    1ffa:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffe:	29 30       	cpi	r18, 0x09	; 9
    2000:	31 05       	cpc	r19, r1
    2002:	5c f5       	brge	.+86     	; 0x205a <KEYPAD_4x4_adjustKeyNumber+0x86>
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	84 30       	cpi	r24, 0x04	; 4
    200a:	91 05       	cpc	r25, r1
    200c:	09 f4       	brne	.+2      	; 0x2010 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    200e:	59 c0       	rjmp	.+178    	; 0x20c2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2010:	2b 81       	ldd	r18, Y+3	; 0x03
    2012:	3c 81       	ldd	r19, Y+4	; 0x04
    2014:	25 30       	cpi	r18, 0x05	; 5
    2016:	31 05       	cpc	r19, r1
    2018:	9c f4       	brge	.+38     	; 0x2040 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	82 30       	cpi	r24, 0x02	; 2
    2020:	91 05       	cpc	r25, r1
    2022:	09 f4       	brne	.+2      	; 0x2026 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2024:	48 c0       	rjmp	.+144    	; 0x20b6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2026:	2b 81       	ldd	r18, Y+3	; 0x03
    2028:	3c 81       	ldd	r19, Y+4	; 0x04
    202a:	23 30       	cpi	r18, 0x03	; 3
    202c:	31 05       	cpc	r19, r1
    202e:	0c f0       	brlt	.+2      	; 0x2032 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2030:	45 c0       	rjmp	.+138    	; 0x20bc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	91 05       	cpc	r25, r1
    203a:	09 f4       	brne	.+2      	; 0x203e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    203c:	39 c0       	rjmp	.+114    	; 0x20b0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    203e:	67 c0       	rjmp	.+206    	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2040:	2b 81       	ldd	r18, Y+3	; 0x03
    2042:	3c 81       	ldd	r19, Y+4	; 0x04
    2044:	26 30       	cpi	r18, 0x06	; 6
    2046:	31 05       	cpc	r19, r1
    2048:	09 f4       	brne	.+2      	; 0x204c <KEYPAD_4x4_adjustKeyNumber+0x78>
    204a:	41 c0       	rjmp	.+130    	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0xfa>
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	9c 81       	ldd	r25, Y+4	; 0x04
    2050:	87 30       	cpi	r24, 0x07	; 7
    2052:	91 05       	cpc	r25, r1
    2054:	0c f0       	brlt	.+2      	; 0x2058 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2056:	3e c0       	rjmp	.+124    	; 0x20d4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2058:	37 c0       	rjmp	.+110    	; 0x20c8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    205a:	2b 81       	ldd	r18, Y+3	; 0x03
    205c:	3c 81       	ldd	r19, Y+4	; 0x04
    205e:	2c 30       	cpi	r18, 0x0C	; 12
    2060:	31 05       	cpc	r19, r1
    2062:	09 f4       	brne	.+2      	; 0x2066 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2064:	46 c0       	rjmp	.+140    	; 0x20f2 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	9c 81       	ldd	r25, Y+4	; 0x04
    206a:	8d 30       	cpi	r24, 0x0D	; 13
    206c:	91 05       	cpc	r25, r1
    206e:	5c f4       	brge	.+22     	; 0x2086 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2070:	2b 81       	ldd	r18, Y+3	; 0x03
    2072:	3c 81       	ldd	r19, Y+4	; 0x04
    2074:	2a 30       	cpi	r18, 0x0A	; 10
    2076:	31 05       	cpc	r19, r1
    2078:	b1 f1       	breq	.+108    	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	8b 30       	cpi	r24, 0x0B	; 11
    2080:	91 05       	cpc	r25, r1
    2082:	a4 f5       	brge	.+104    	; 0x20ec <KEYPAD_4x4_adjustKeyNumber+0x118>
    2084:	2d c0       	rjmp	.+90     	; 0x20e0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2086:	2b 81       	ldd	r18, Y+3	; 0x03
    2088:	3c 81       	ldd	r19, Y+4	; 0x04
    208a:	2e 30       	cpi	r18, 0x0E	; 14
    208c:	31 05       	cpc	r19, r1
    208e:	b9 f1       	breq	.+110    	; 0x20fe <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	8e 30       	cpi	r24, 0x0E	; 14
    2096:	91 05       	cpc	r25, r1
    2098:	7c f1       	brlt	.+94     	; 0x20f8 <KEYPAD_4x4_adjustKeyNumber+0x124>
    209a:	2b 81       	ldd	r18, Y+3	; 0x03
    209c:	3c 81       	ldd	r19, Y+4	; 0x04
    209e:	2f 30       	cpi	r18, 0x0F	; 15
    20a0:	31 05       	cpc	r19, r1
    20a2:	79 f1       	breq	.+94     	; 0x2102 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	9c 81       	ldd	r25, Y+4	; 0x04
    20a8:	80 31       	cpi	r24, 0x10	; 16
    20aa:	91 05       	cpc	r25, r1
    20ac:	69 f1       	breq	.+90     	; 0x2108 <KEYPAD_4x4_adjustKeyNumber+0x134>
    20ae:	2f c0       	rjmp	.+94     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    20b0:	87 e0       	ldi	r24, 0x07	; 7
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	2e c0       	rjmp	.+92     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    20b6:	88 e0       	ldi	r24, 0x08	; 8
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	2b c0       	rjmp	.+86     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    20bc:	89 e0       	ldi	r24, 0x09	; 9
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	28 c0       	rjmp	.+80     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    20c2:	85 e2       	ldi	r24, 0x25	; 37
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	25 c0       	rjmp	.+74     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    20c8:	84 e0       	ldi	r24, 0x04	; 4
    20ca:	89 83       	std	Y+1, r24	; 0x01
    20cc:	22 c0       	rjmp	.+68     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    20ce:	85 e0       	ldi	r24, 0x05	; 5
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	1f c0       	rjmp	.+62     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    20d4:	86 e0       	ldi	r24, 0x06	; 6
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	1c c0       	rjmp	.+56     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    20da:	8a e2       	ldi	r24, 0x2A	; 42
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	19 c0       	rjmp	.+50     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	16 c0       	rjmp	.+44     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	13 c0       	rjmp	.+38     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    20ec:	83 e0       	ldi	r24, 0x03	; 3
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	10 c0       	rjmp	.+32     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    20f2:	8d e2       	ldi	r24, 0x2D	; 45
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	0d c0       	rjmp	.+26     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    20f8:	8d e0       	ldi	r24, 0x0D	; 13
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	0a c0       	rjmp	.+20     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    20fe:	19 82       	std	Y+1, r1	; 0x01
    2100:	08 c0       	rjmp	.+16     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2102:	8d e3       	ldi	r24, 0x3D	; 61
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	05 c0       	rjmp	.+10     	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2108:	8b e2       	ldi	r24, 0x2B	; 43
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2112:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <main>:
uint8 PASSWORD_ARRAY_SIZE;
uint8 array[PASSWORD_LIMIT];


int main()
{
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62


/*	ptr = Password;*/


	UART_init(9600);
    212a:	60 e8       	ldi	r22, 0x80	; 128
    212c:	75 e2       	ldi	r23, 0x25	; 37
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	LCD_init();
    2136:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_init>

	while(1)
	{


		TWI_init();
    213a:	0e 94 81 06 	call	0xd02	; 0xd02 <TWI_init>
		recieved_password();
    213e:	0e 94 a8 10 	call	0x2150	; 0x2150 <recieved_password>
		storePasswordInEEPROM();
    2142:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <storePasswordInEEPROM>
		 GetPasswordFromEEPROM();
    2146:	0e 94 88 11 	call	0x2310	; 0x2310 <GetPasswordFromEEPROM>
		 compare_pasword();
    214a:	0e 94 2e 12 	call	0x245c	; 0x245c <compare_pasword>
    214e:	ff cf       	rjmp	.-2      	; 0x214e <main+0x2c>

00002150 <recieved_password>:
	return 0;
}


void recieved_password(void)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
	for(i=0;i<PASSWORD_LIMIT;i++)
    2158:	10 92 94 00 	sts	0x0094, r1
    215c:	2b c0       	rjmp	.+86     	; 0x21b4 <recieved_password+0x64>
	{
			key = UART_recieveByte();
    215e:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    2162:	80 93 96 00 	sts	0x0096, r24




			if( (key >= 0) && (key <= 9) )
    2166:	80 91 96 00 	lds	r24, 0x0096
    216a:	8a 30       	cpi	r24, 0x0A	; 10
    216c:	00 f5       	brcc	.+64     	; 0x21ae <recieved_password+0x5e>
			{
				Password_1[i]= key;
    216e:	80 91 94 00 	lds	r24, 0x0094
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	20 91 96 00 	lds	r18, 0x0096
    217a:	fc 01       	movw	r30, r24
    217c:	ee 58       	subi	r30, 0x8E	; 142
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	20 83       	st	Z, r18

				LCD_intgerToString(Password_1[i]);
    2182:	80 91 94 00 	lds	r24, 0x0094
    2186:	88 2f       	mov	r24, r24
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	fc 01       	movw	r30, r24
    218c:	ee 58       	subi	r30, 0x8E	; 142
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 81       	ld	r24, Z
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_intgerToString>
				PASSWORD_ARRAY_SIZE = i;
    219a:	80 91 94 00 	lds	r24, 0x0094
    219e:	80 93 95 00 	sts	0x0095, r24
}


void recieved_password(void)
{
	for(i=0;i<PASSWORD_LIMIT;i++)
    21a2:	80 91 94 00 	lds	r24, 0x0094
    21a6:	8f 5f       	subi	r24, 0xFF	; 255
    21a8:	80 93 94 00 	sts	0x0094, r24
    21ac:	03 c0       	rjmp	.+6      	; 0x21b4 <recieved_password+0x64>
				LCD_intgerToString(Password_1[i]);
				PASSWORD_ARRAY_SIZE = i;
			}
			else
			{
			LCD_clearScreen();
    21ae:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_clearScreen>
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <recieved_password+0x6c>
}


void recieved_password(void)
{
	for(i=0;i<PASSWORD_LIMIT;i++)
    21b4:	80 91 94 00 	lds	r24, 0x0094
    21b8:	80 31       	cpi	r24, 0x10	; 16
    21ba:	88 f2       	brcs	.-94     	; 0x215e <recieved_password+0xe>
				break;
			}

	}

}
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <storePasswordInEEPROM>:

void storePasswordInEEPROM(void)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	2e 97       	sbiw	r28, 0x0e	; 14
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61



	for(i=0;i<PASSWORD_ARRAY_SIZE;i++)
    21d6:	10 92 94 00 	sts	0x0094, r1
    21da:	8a c0       	rjmp	.+276    	; 0x22f0 <storePasswordInEEPROM+0x12e>
	{
		EEPROM_writeByte(0x0311+i,Password_1[i]);
    21dc:	80 91 94 00 	lds	r24, 0x0094
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	8f 5e       	subi	r24, 0xEF	; 239
    21e6:	9c 4f       	sbci	r25, 0xFC	; 252
    21e8:	ac 01       	movw	r20, r24
    21ea:	80 91 94 00 	lds	r24, 0x0094
    21ee:	88 2f       	mov	r24, r24
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	fc 01       	movw	r30, r24
    21f4:	ee 58       	subi	r30, 0x8E	; 142
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	20 81       	ld	r18, Z
    21fa:	ca 01       	movw	r24, r20
    21fc:	62 2f       	mov	r22, r18
    21fe:	0e 94 3c 0a 	call	0x1478	; 0x1478 <EEPROM_writeByte>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	aa e7       	ldi	r26, 0x7A	; 122
    2208:	b4 e4       	ldi	r27, 0x44	; 68
    220a:	8b 87       	std	Y+11, r24	; 0x0b
    220c:	9c 87       	std	Y+12, r25	; 0x0c
    220e:	ad 87       	std	Y+13, r26	; 0x0d
    2210:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2212:	6b 85       	ldd	r22, Y+11	; 0x0b
    2214:	7c 85       	ldd	r23, Y+12	; 0x0c
    2216:	8d 85       	ldd	r24, Y+13	; 0x0d
    2218:	9e 85       	ldd	r25, Y+14	; 0x0e
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	4a ef       	ldi	r20, 0xFA	; 250
    2220:	54 e4       	ldi	r21, 0x44	; 68
    2222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	8f 83       	std	Y+7, r24	; 0x07
    222c:	98 87       	std	Y+8, r25	; 0x08
    222e:	a9 87       	std	Y+9, r26	; 0x09
    2230:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2232:	6f 81       	ldd	r22, Y+7	; 0x07
    2234:	78 85       	ldd	r23, Y+8	; 0x08
    2236:	89 85       	ldd	r24, Y+9	; 0x09
    2238:	9a 85       	ldd	r25, Y+10	; 0x0a
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e8       	ldi	r20, 0x80	; 128
    2240:	5f e3       	ldi	r21, 0x3F	; 63
    2242:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2246:	88 23       	and	r24, r24
    2248:	2c f4       	brge	.+10     	; 0x2254 <storePasswordInEEPROM+0x92>
		__ticks = 1;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	9e 83       	std	Y+6, r25	; 0x06
    2250:	8d 83       	std	Y+5, r24	; 0x05
    2252:	3f c0       	rjmp	.+126    	; 0x22d2 <storePasswordInEEPROM+0x110>
	else if (__tmp > 65535)
    2254:	6f 81       	ldd	r22, Y+7	; 0x07
    2256:	78 85       	ldd	r23, Y+8	; 0x08
    2258:	89 85       	ldd	r24, Y+9	; 0x09
    225a:	9a 85       	ldd	r25, Y+10	; 0x0a
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	3f ef       	ldi	r19, 0xFF	; 255
    2260:	4f e7       	ldi	r20, 0x7F	; 127
    2262:	57 e4       	ldi	r21, 0x47	; 71
    2264:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2268:	18 16       	cp	r1, r24
    226a:	4c f5       	brge	.+82     	; 0x22be <storePasswordInEEPROM+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226c:	6b 85       	ldd	r22, Y+11	; 0x0b
    226e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2270:	8d 85       	ldd	r24, Y+13	; 0x0d
    2272:	9e 85       	ldd	r25, Y+14	; 0x0e
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e2       	ldi	r20, 0x20	; 32
    227a:	51 e4       	ldi	r21, 0x41	; 65
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
    2294:	0f c0       	rjmp	.+30     	; 0x22b4 <storePasswordInEEPROM+0xf2>
    2296:	88 ec       	ldi	r24, 0xC8	; 200
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	9c 83       	std	Y+4, r25	; 0x04
    229c:	8b 83       	std	Y+3, r24	; 0x03
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <storePasswordInEEPROM+0xe0>
    22a6:	9c 83       	std	Y+4, r25	; 0x04
    22a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b4:	8d 81       	ldd	r24, Y+5	; 0x05
    22b6:	9e 81       	ldd	r25, Y+6	; 0x06
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	69 f7       	brne	.-38     	; 0x2296 <storePasswordInEEPROM+0xd4>
    22bc:	14 c0       	rjmp	.+40     	; 0x22e6 <storePasswordInEEPROM+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22be:	6f 81       	ldd	r22, Y+7	; 0x07
    22c0:	78 85       	ldd	r23, Y+8	; 0x08
    22c2:	89 85       	ldd	r24, Y+9	; 0x09
    22c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	9a 83       	std	Y+2, r25	; 0x02
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	9a 81       	ldd	r25, Y+2	; 0x02
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <storePasswordInEEPROM+0x11c>
    22e2:	9a 83       	std	Y+2, r25	; 0x02
    22e4:	89 83       	std	Y+1, r24	; 0x01
void storePasswordInEEPROM(void)
{



	for(i=0;i<PASSWORD_ARRAY_SIZE;i++)
    22e6:	80 91 94 00 	lds	r24, 0x0094
    22ea:	8f 5f       	subi	r24, 0xFF	; 255
    22ec:	80 93 94 00 	sts	0x0094, r24
    22f0:	90 91 94 00 	lds	r25, 0x0094
    22f4:	80 91 95 00 	lds	r24, 0x0095
    22f8:	98 17       	cp	r25, r24
    22fa:	08 f4       	brcc	.+2      	; 0x22fe <storePasswordInEEPROM+0x13c>
    22fc:	6f cf       	rjmp	.-290    	; 0x21dc <storePasswordInEEPROM+0x1a>
	{
		EEPROM_writeByte(0x0311+i,Password_1[i]);
		_delay_ms(1000);
	}

}
    22fe:	2e 96       	adiw	r28, 0x0e	; 14
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <GetPasswordFromEEPROM>:

void GetPasswordFromEEPROM(void)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	2e 97       	sbiw	r28, 0x0e	; 14
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61


	for(i=0;i<PASSWORD_ARRAY_SIZE;i++)
    2324:	10 92 94 00 	sts	0x0094, r1
    2328:	89 c0       	rjmp	.+274    	; 0x243c <GetPasswordFromEEPROM+0x12c>
	{
		EEPROM_readByte(0x0311+i,&array[i]);
    232a:	80 91 94 00 	lds	r24, 0x0094
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	8f 5e       	subi	r24, 0xEF	; 239
    2334:	9c 4f       	sbci	r25, 0xFC	; 252
    2336:	ac 01       	movw	r20, r24
    2338:	80 91 94 00 	lds	r24, 0x0094
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	9c 01       	movw	r18, r24
    2342:	29 56       	subi	r18, 0x69	; 105
    2344:	3f 4f       	sbci	r19, 0xFF	; 255
    2346:	ca 01       	movw	r24, r20
    2348:	b9 01       	movw	r22, r18
    234a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <EEPROM_readByte>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	aa e7       	ldi	r26, 0x7A	; 122
    2354:	b4 e4       	ldi	r27, 0x44	; 68
    2356:	8b 87       	std	Y+11, r24	; 0x0b
    2358:	9c 87       	std	Y+12, r25	; 0x0c
    235a:	ad 87       	std	Y+13, r26	; 0x0d
    235c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2360:	7c 85       	ldd	r23, Y+12	; 0x0c
    2362:	8d 85       	ldd	r24, Y+13	; 0x0d
    2364:	9e 85       	ldd	r25, Y+14	; 0x0e
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a ef       	ldi	r20, 0xFA	; 250
    236c:	54 e4       	ldi	r21, 0x44	; 68
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8f 83       	std	Y+7, r24	; 0x07
    2378:	98 87       	std	Y+8, r25	; 0x08
    237a:	a9 87       	std	Y+9, r26	; 0x09
    237c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	2c f4       	brge	.+10     	; 0x23a0 <GetPasswordFromEEPROM+0x90>
		__ticks = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	3f c0       	rjmp	.+126    	; 0x241e <GetPasswordFromEEPROM+0x10e>
	else if (__tmp > 65535)
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	4c f5       	brge	.+82     	; 0x240a <GetPasswordFromEEPROM+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    23bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23be:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <GetPasswordFromEEPROM+0xf0>
    23e2:	88 ec       	ldi	r24, 0xC8	; 200
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	8b 83       	std	Y+3, r24	; 0x03
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <GetPasswordFromEEPROM+0xde>
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	9e 81       	ldd	r25, Y+6	; 0x06
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	69 f7       	brne	.-38     	; 0x23e2 <GetPasswordFromEEPROM+0xd2>
    2408:	14 c0       	rjmp	.+40     	; 0x2432 <GetPasswordFromEEPROM+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	6f 81       	ldd	r22, Y+7	; 0x07
    240c:	78 85       	ldd	r23, Y+8	; 0x08
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	9a 83       	std	Y+2, r25	; 0x02
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <GetPasswordFromEEPROM+0x11a>
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01

void GetPasswordFromEEPROM(void)
{


	for(i=0;i<PASSWORD_ARRAY_SIZE;i++)
    2432:	80 91 94 00 	lds	r24, 0x0094
    2436:	8f 5f       	subi	r24, 0xFF	; 255
    2438:	80 93 94 00 	sts	0x0094, r24
    243c:	90 91 94 00 	lds	r25, 0x0094
    2440:	80 91 95 00 	lds	r24, 0x0095
    2444:	98 17       	cp	r25, r24
    2446:	08 f4       	brcc	.+2      	; 0x244a <GetPasswordFromEEPROM+0x13a>
    2448:	70 cf       	rjmp	.-288    	; 0x232a <GetPasswordFromEEPROM+0x1a>
	{
		EEPROM_readByte(0x0311+i,&array[i]);
		_delay_ms(1000);
	}

}
    244a:	2e 96       	adiw	r28, 0x0e	; 14
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <compare_pasword>:

void compare_pasword(void)
{
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62

	for(i=0;i<PASSWORD_ARRAY_SIZE;i++)
    2464:	10 92 94 00 	sts	0x0094, r1
    2468:	09 c0       	rjmp	.+18     	; 0x247c <compare_pasword+0x20>
	{
	/*	if (Password_1[i] != array[i] )
		{
			LCD_displayString("ERROR");
		}*/
		LCD_displayString(array);
    246a:	87 e9       	ldi	r24, 0x97	; 151
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_displayString>
}

void compare_pasword(void)
{

	for(i=0;i<PASSWORD_ARRAY_SIZE;i++)
    2472:	80 91 94 00 	lds	r24, 0x0094
    2476:	8f 5f       	subi	r24, 0xFF	; 255
    2478:	80 93 94 00 	sts	0x0094, r24
    247c:	90 91 94 00 	lds	r25, 0x0094
    2480:	80 91 95 00 	lds	r24, 0x0095
    2484:	98 17       	cp	r25, r24
    2486:	88 f3       	brcs	.-30     	; 0x246a <compare_pasword+0xe>
			LCD_displayString("ERROR");
		}*/
		LCD_displayString(array);

	}
	LCD_displayString("tez samir");
    2488:	80 e6       	ldi	r24, 0x60	; 96
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <LCD_displayString>


}
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <__udivmodsi4>:
    2496:	a1 e2       	ldi	r26, 0x21	; 33
    2498:	1a 2e       	mov	r1, r26
    249a:	aa 1b       	sub	r26, r26
    249c:	bb 1b       	sub	r27, r27
    249e:	fd 01       	movw	r30, r26
    24a0:	0d c0       	rjmp	.+26     	; 0x24bc <__udivmodsi4_ep>

000024a2 <__udivmodsi4_loop>:
    24a2:	aa 1f       	adc	r26, r26
    24a4:	bb 1f       	adc	r27, r27
    24a6:	ee 1f       	adc	r30, r30
    24a8:	ff 1f       	adc	r31, r31
    24aa:	a2 17       	cp	r26, r18
    24ac:	b3 07       	cpc	r27, r19
    24ae:	e4 07       	cpc	r30, r20
    24b0:	f5 07       	cpc	r31, r21
    24b2:	20 f0       	brcs	.+8      	; 0x24bc <__udivmodsi4_ep>
    24b4:	a2 1b       	sub	r26, r18
    24b6:	b3 0b       	sbc	r27, r19
    24b8:	e4 0b       	sbc	r30, r20
    24ba:	f5 0b       	sbc	r31, r21

000024bc <__udivmodsi4_ep>:
    24bc:	66 1f       	adc	r22, r22
    24be:	77 1f       	adc	r23, r23
    24c0:	88 1f       	adc	r24, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	1a 94       	dec	r1
    24c6:	69 f7       	brne	.-38     	; 0x24a2 <__udivmodsi4_loop>
    24c8:	60 95       	com	r22
    24ca:	70 95       	com	r23
    24cc:	80 95       	com	r24
    24ce:	90 95       	com	r25
    24d0:	9b 01       	movw	r18, r22
    24d2:	ac 01       	movw	r20, r24
    24d4:	bd 01       	movw	r22, r26
    24d6:	cf 01       	movw	r24, r30
    24d8:	08 95       	ret

000024da <__prologue_saves__>:
    24da:	2f 92       	push	r2
    24dc:	3f 92       	push	r3
    24de:	4f 92       	push	r4
    24e0:	5f 92       	push	r5
    24e2:	6f 92       	push	r6
    24e4:	7f 92       	push	r7
    24e6:	8f 92       	push	r8
    24e8:	9f 92       	push	r9
    24ea:	af 92       	push	r10
    24ec:	bf 92       	push	r11
    24ee:	cf 92       	push	r12
    24f0:	df 92       	push	r13
    24f2:	ef 92       	push	r14
    24f4:	ff 92       	push	r15
    24f6:	0f 93       	push	r16
    24f8:	1f 93       	push	r17
    24fa:	cf 93       	push	r28
    24fc:	df 93       	push	r29
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	ca 1b       	sub	r28, r26
    2504:	db 0b       	sbc	r29, r27
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	09 94       	ijmp

00002512 <__epilogue_restores__>:
    2512:	2a 88       	ldd	r2, Y+18	; 0x12
    2514:	39 88       	ldd	r3, Y+17	; 0x11
    2516:	48 88       	ldd	r4, Y+16	; 0x10
    2518:	5f 84       	ldd	r5, Y+15	; 0x0f
    251a:	6e 84       	ldd	r6, Y+14	; 0x0e
    251c:	7d 84       	ldd	r7, Y+13	; 0x0d
    251e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2520:	9b 84       	ldd	r9, Y+11	; 0x0b
    2522:	aa 84       	ldd	r10, Y+10	; 0x0a
    2524:	b9 84       	ldd	r11, Y+9	; 0x09
    2526:	c8 84       	ldd	r12, Y+8	; 0x08
    2528:	df 80       	ldd	r13, Y+7	; 0x07
    252a:	ee 80       	ldd	r14, Y+6	; 0x06
    252c:	fd 80       	ldd	r15, Y+5	; 0x05
    252e:	0c 81       	ldd	r16, Y+4	; 0x04
    2530:	1b 81       	ldd	r17, Y+3	; 0x03
    2532:	aa 81       	ldd	r26, Y+2	; 0x02
    2534:	b9 81       	ldd	r27, Y+1	; 0x01
    2536:	ce 0f       	add	r28, r30
    2538:	d1 1d       	adc	r29, r1
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
    2544:	ed 01       	movw	r28, r26
    2546:	08 95       	ret

00002548 <itoa>:
    2548:	fb 01       	movw	r30, r22
    254a:	9f 01       	movw	r18, r30
    254c:	e8 94       	clt
    254e:	42 30       	cpi	r20, 0x02	; 2
    2550:	c4 f0       	brlt	.+48     	; 0x2582 <itoa+0x3a>
    2552:	45 32       	cpi	r20, 0x25	; 37
    2554:	b4 f4       	brge	.+44     	; 0x2582 <itoa+0x3a>
    2556:	4a 30       	cpi	r20, 0x0A	; 10
    2558:	29 f4       	brne	.+10     	; 0x2564 <itoa+0x1c>
    255a:	97 fb       	bst	r25, 7
    255c:	1e f4       	brtc	.+6      	; 0x2564 <itoa+0x1c>
    255e:	90 95       	com	r25
    2560:	81 95       	neg	r24
    2562:	9f 4f       	sbci	r25, 0xFF	; 255
    2564:	64 2f       	mov	r22, r20
    2566:	77 27       	eor	r23, r23
    2568:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__udivmodhi4>
    256c:	80 5d       	subi	r24, 0xD0	; 208
    256e:	8a 33       	cpi	r24, 0x3A	; 58
    2570:	0c f0       	brlt	.+2      	; 0x2574 <itoa+0x2c>
    2572:	89 5d       	subi	r24, 0xD9	; 217
    2574:	81 93       	st	Z+, r24
    2576:	cb 01       	movw	r24, r22
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	a1 f7       	brne	.-24     	; 0x2564 <itoa+0x1c>
    257c:	16 f4       	brtc	.+4      	; 0x2582 <itoa+0x3a>
    257e:	5d e2       	ldi	r21, 0x2D	; 45
    2580:	51 93       	st	Z+, r21
    2582:	10 82       	st	Z, r1
    2584:	c9 01       	movw	r24, r18
    2586:	0c 94 c5 12 	jmp	0x258a	; 0x258a <strrev>

0000258a <strrev>:
    258a:	dc 01       	movw	r26, r24
    258c:	fc 01       	movw	r30, r24
    258e:	67 2f       	mov	r22, r23
    2590:	71 91       	ld	r23, Z+
    2592:	77 23       	and	r23, r23
    2594:	e1 f7       	brne	.-8      	; 0x258e <strrev+0x4>
    2596:	32 97       	sbiw	r30, 0x02	; 2
    2598:	04 c0       	rjmp	.+8      	; 0x25a2 <strrev+0x18>
    259a:	7c 91       	ld	r23, X
    259c:	6d 93       	st	X+, r22
    259e:	70 83       	st	Z, r23
    25a0:	62 91       	ld	r22, -Z
    25a2:	ae 17       	cp	r26, r30
    25a4:	bf 07       	cpc	r27, r31
    25a6:	c8 f3       	brcs	.-14     	; 0x259a <strrev+0x10>
    25a8:	08 95       	ret

000025aa <__udivmodhi4>:
    25aa:	aa 1b       	sub	r26, r26
    25ac:	bb 1b       	sub	r27, r27
    25ae:	51 e1       	ldi	r21, 0x11	; 17
    25b0:	07 c0       	rjmp	.+14     	; 0x25c0 <__udivmodhi4_ep>

000025b2 <__udivmodhi4_loop>:
    25b2:	aa 1f       	adc	r26, r26
    25b4:	bb 1f       	adc	r27, r27
    25b6:	a6 17       	cp	r26, r22
    25b8:	b7 07       	cpc	r27, r23
    25ba:	10 f0       	brcs	.+4      	; 0x25c0 <__udivmodhi4_ep>
    25bc:	a6 1b       	sub	r26, r22
    25be:	b7 0b       	sbc	r27, r23

000025c0 <__udivmodhi4_ep>:
    25c0:	88 1f       	adc	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	5a 95       	dec	r21
    25c6:	a9 f7       	brne	.-22     	; 0x25b2 <__udivmodhi4_loop>
    25c8:	80 95       	com	r24
    25ca:	90 95       	com	r25
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	08 95       	ret

000025d2 <_exit>:
    25d2:	f8 94       	cli

000025d4 <__stop_program>:
    25d4:	ff cf       	rjmp	.-2      	; 0x25d4 <__stop_program>
